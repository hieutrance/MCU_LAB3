
VXL_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bf4  08002bf4  00003bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c18  08002c18  00004058  2**0
                  CONTENTS
  4 .ARM          00000000  08002c18  08002c18  00004058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c18  08002c18  00004058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c18  08002c18  00003c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c1c  08002c1c  00003c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08002c20  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000058  08002c78  00004058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002c78  0000412c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086d3  00000000  00000000  00004081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb2  00000000  00000000  0000c754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0000e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007be  00000000  00000000  0000ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f08  00000000  00000000  0000f606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c975  00000000  00000000  0002650e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824b5  00000000  00000000  00032e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  000b537c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000b7bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bdc 	.word	0x08002bdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002bdc 	.word	0x08002bdc

0800014c <isButtonPressed>:
int TimerForKeyPress[NUM_OF_BUTTONS] = {200, 200, 200};

int Pressed_flag[NUM_OF_BUTTONS] = {0};
int LongPressed_flag[NUM_OF_BUTTONS] = {0};

int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(Pressed_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		Pressed_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000074 	.word	0x20000074

08000180 <isButtonLongPressed>:

int isButtonLongPressed(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if(LongPressed_flag[num] == 1){
 8000188:	4a09      	ldr	r2, [pc, #36]	@ (80001b0 <isButtonLongPressed+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d106      	bne.n	80001a2 <isButtonLongPressed+0x22>
		LongPressed_flag[num] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	@ (80001b0 <isButtonLongPressed+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <isButtonLongPressed+0x24>
	}
	return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000080 	.word	0x20000080

080001b4 <getKeyInput>:

void getKeyInput() {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e08f      	b.n	80002e0 <getKeyInput+0x12c>
        KeyReg0[i] = KeyReg1[i];
 80001c0:	4a4c      	ldr	r2, [pc, #304]	@ (80002f4 <getKeyInput+0x140>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c8:	494b      	ldr	r1, [pc, #300]	@ (80002f8 <getKeyInput+0x144>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 80001d0:	4a4a      	ldr	r2, [pc, #296]	@ (80002fc <getKeyInput+0x148>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4946      	ldr	r1, [pc, #280]	@ (80002f4 <getKeyInput+0x140>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (i == MODE_BUTTON) {
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d10a      	bne.n	80001fc <getKeyInput+0x48>
            KeyReg2[i] = HAL_GPIO_ReadPin(MODE_BUTTON_GPIO_Port, MODE_BUTTON_Pin);
 80001e6:	2104      	movs	r1, #4
 80001e8:	4845      	ldr	r0, [pc, #276]	@ (8000300 <getKeyInput+0x14c>)
 80001ea:	f001 fcc9 	bl	8001b80 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4619      	mov	r1, r3
 80001f2:	4a42      	ldr	r2, [pc, #264]	@ (80002fc <getKeyInput+0x148>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001fa:	e01a      	b.n	8000232 <getKeyInput+0x7e>
        } else if (i == MODIFY_BUTTON) {
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d10a      	bne.n	8000218 <getKeyInput+0x64>
            KeyReg2[i] = HAL_GPIO_ReadPin(MODIFY_BUTTON_GPIO_Port, MODIFY_BUTTON_Pin);
 8000202:	2108      	movs	r1, #8
 8000204:	483e      	ldr	r0, [pc, #248]	@ (8000300 <getKeyInput+0x14c>)
 8000206:	f001 fcbb 	bl	8001b80 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	4619      	mov	r1, r3
 800020e:	4a3b      	ldr	r2, [pc, #236]	@ (80002fc <getKeyInput+0x148>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000216:	e00c      	b.n	8000232 <getKeyInput+0x7e>
        } else if (i == SET_BUTTON) {
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b02      	cmp	r3, #2
 800021c:	d109      	bne.n	8000232 <getKeyInput+0x7e>
            KeyReg2[i] = HAL_GPIO_ReadPin(SET_BUTTON_GPIO_Port, SET_BUTTON_Pin);
 800021e:	2110      	movs	r1, #16
 8000220:	4837      	ldr	r0, [pc, #220]	@ (8000300 <getKeyInput+0x14c>)
 8000222:	f001 fcad 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	4619      	mov	r1, r3
 800022a:	4a34      	ldr	r2, [pc, #208]	@ (80002fc <getKeyInput+0x148>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000232:	4a31      	ldr	r2, [pc, #196]	@ (80002f8 <getKeyInput+0x144>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	492e      	ldr	r1, [pc, #184]	@ (80002f4 <getKeyInput+0x140>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d149      	bne.n	80002da <getKeyInput+0x126>
 8000246:	4a2b      	ldr	r2, [pc, #172]	@ (80002f4 <getKeyInput+0x140>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	492b      	ldr	r1, [pc, #172]	@ (80002fc <getKeyInput+0x148>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d13f      	bne.n	80002da <getKeyInput+0x126>
            if (KeyReg2[i] == PRESSED_STATE) {
 800025a:	4a28      	ldr	r2, [pc, #160]	@ (80002fc <getKeyInput+0x148>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d12f      	bne.n	80002c6 <getKeyInput+0x112>
                if (KeyReg3[i] != PRESSED_STATE) { // Phát hiện nhấn ngắn
 8000266:	4a27      	ldr	r2, [pc, #156]	@ (8000304 <getKeyInput+0x150>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d00f      	beq.n	8000292 <getKeyInput+0xde>
                    Pressed_flag[i] = 1;
 8000272:	4a25      	ldr	r2, [pc, #148]	@ (8000308 <getKeyInput+0x154>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2101      	movs	r1, #1
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    KeyReg3[i] = PRESSED_STATE;
 800027c:	4a21      	ldr	r2, [pc, #132]	@ (8000304 <getKeyInput+0x150>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2100      	movs	r1, #0
 8000282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    TimerForKeyPress[i] = 200;
 8000286:	4a21      	ldr	r2, [pc, #132]	@ (800030c <getKeyInput+0x158>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	21c8      	movs	r1, #200	@ 0xc8
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000290:	e023      	b.n	80002da <getKeyInput+0x126>
                } else { // Xử lý nhấn giữ
                    TimerForKeyPress[i]--;
 8000292:	4a1e      	ldr	r2, [pc, #120]	@ (800030c <getKeyInput+0x158>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029a:	1e5a      	subs	r2, r3, #1
 800029c:	491b      	ldr	r1, [pc, #108]	@ (800030c <getKeyInput+0x158>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if (TimerForKeyPress[i] == 0) {
 80002a4:	4a19      	ldr	r2, [pc, #100]	@ (800030c <getKeyInput+0x158>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d114      	bne.n	80002da <getKeyInput+0x126>
                        LongPressed_flag[i] = 1;
 80002b0:	4a17      	ldr	r2, [pc, #92]	@ (8000310 <getKeyInput+0x15c>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2101      	movs	r1, #1
 80002b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        TimerForKeyPress[i] = 200;
 80002ba:	4a14      	ldr	r2, [pc, #80]	@ (800030c <getKeyInput+0x158>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	21c8      	movs	r1, #200	@ 0xc8
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c4:	e009      	b.n	80002da <getKeyInput+0x126>
                    }
                }
            } else { // Nút không được nhấn
                KeyReg3[i] = NORMAL_STATE;
 80002c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000304 <getKeyInput+0x150>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2101      	movs	r1, #1
 80002cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                TimerForKeyPress[i] = 200; // Reset bộ đếm
 80002d0:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <getKeyInput+0x158>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	21c8      	movs	r1, #200	@ 0xc8
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3301      	adds	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	f77f af6c 	ble.w	80001c0 <getKeyInput+0xc>
            }
        }
    }
}
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2000000c 	.word	0x2000000c
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000018 	.word	0x20000018
 8000300:	40010800 	.word	0x40010800
 8000304:	20000024 	.word	0x20000024
 8000308:	20000074 	.word	0x20000074
 800030c:	20000030 	.word	0x20000030
 8000310:	20000080 	.word	0x20000080

08000314 <display7SegLed>:
#include "display7SegLed.h"

int led_buffer[4] = {0};
int led_extra_buffer[4]={0};

void display7SegLed(int num){
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	switch(num){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b09      	cmp	r3, #9
 8000320:	f200 8180 	bhi.w	8000624 <display7SegLed+0x310>
 8000324:	a201      	add	r2, pc, #4	@ (adr r2, 800032c <display7SegLed+0x18>)
 8000326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032a:	bf00      	nop
 800032c:	08000355 	.word	0x08000355
 8000330:	0800039d 	.word	0x0800039d
 8000334:	080003e5 	.word	0x080003e5
 8000338:	0800042d 	.word	0x0800042d
 800033c:	08000475 	.word	0x08000475
 8000340:	080004bd 	.word	0x080004bd
 8000344:	08000505 	.word	0x08000505
 8000348:	0800054d 	.word	0x0800054d
 800034c:	08000595 	.word	0x08000595
 8000350:	080005dd 	.word	0x080005dd
	case 0:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2101      	movs	r1, #1
 8000358:	48b5      	ldr	r0, [pc, #724]	@ (8000630 <display7SegLed+0x31c>)
 800035a:	f001 fc28 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2102      	movs	r1, #2
 8000362:	48b3      	ldr	r0, [pc, #716]	@ (8000630 <display7SegLed+0x31c>)
 8000364:	f001 fc23 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2104      	movs	r1, #4
 800036c:	48b0      	ldr	r0, [pc, #704]	@ (8000630 <display7SegLed+0x31c>)
 800036e:	f001 fc1e 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2108      	movs	r1, #8
 8000376:	48ae      	ldr	r0, [pc, #696]	@ (8000630 <display7SegLed+0x31c>)
 8000378:	f001 fc19 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2110      	movs	r1, #16
 8000380:	48ab      	ldr	r0, [pc, #684]	@ (8000630 <display7SegLed+0x31c>)
 8000382:	f001 fc14 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	2120      	movs	r1, #32
 800038a:	48a9      	ldr	r0, [pc, #676]	@ (8000630 <display7SegLed+0x31c>)
 800038c:	f001 fc0f 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , SET);
 8000390:	2201      	movs	r2, #1
 8000392:	2140      	movs	r1, #64	@ 0x40
 8000394:	48a6      	ldr	r0, [pc, #664]	@ (8000630 <display7SegLed+0x31c>)
 8000396:	f001 fc0a 	bl	8001bae <HAL_GPIO_WritePin>
		break;
 800039a:	e144      	b.n	8000626 <display7SegLed+0x312>
	case 1:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2101      	movs	r1, #1
 80003a0:	48a3      	ldr	r0, [pc, #652]	@ (8000630 <display7SegLed+0x31c>)
 80003a2:	f001 fc04 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2102      	movs	r1, #2
 80003aa:	48a1      	ldr	r0, [pc, #644]	@ (8000630 <display7SegLed+0x31c>)
 80003ac:	f001 fbff 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2104      	movs	r1, #4
 80003b4:	489e      	ldr	r0, [pc, #632]	@ (8000630 <display7SegLed+0x31c>)
 80003b6:	f001 fbfa 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2108      	movs	r1, #8
 80003be:	489c      	ldr	r0, [pc, #624]	@ (8000630 <display7SegLed+0x31c>)
 80003c0:	f001 fbf5 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2110      	movs	r1, #16
 80003c8:	4899      	ldr	r0, [pc, #612]	@ (8000630 <display7SegLed+0x31c>)
 80003ca:	f001 fbf0 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2120      	movs	r1, #32
 80003d2:	4897      	ldr	r0, [pc, #604]	@ (8000630 <display7SegLed+0x31c>)
 80003d4:	f001 fbeb 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2140      	movs	r1, #64	@ 0x40
 80003dc:	4894      	ldr	r0, [pc, #592]	@ (8000630 <display7SegLed+0x31c>)
 80003de:	f001 fbe6 	bl	8001bae <HAL_GPIO_WritePin>
		break;
 80003e2:	e120      	b.n	8000626 <display7SegLed+0x312>
	case 2:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	4891      	ldr	r0, [pc, #580]	@ (8000630 <display7SegLed+0x31c>)
 80003ea:	f001 fbe0 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2102      	movs	r1, #2
 80003f2:	488f      	ldr	r0, [pc, #572]	@ (8000630 <display7SegLed+0x31c>)
 80003f4:	f001 fbdb 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2104      	movs	r1, #4
 80003fc:	488c      	ldr	r0, [pc, #560]	@ (8000630 <display7SegLed+0x31c>)
 80003fe:	f001 fbd6 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2108      	movs	r1, #8
 8000406:	488a      	ldr	r0, [pc, #552]	@ (8000630 <display7SegLed+0x31c>)
 8000408:	f001 fbd1 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2110      	movs	r1, #16
 8000410:	4887      	ldr	r0, [pc, #540]	@ (8000630 <display7SegLed+0x31c>)
 8000412:	f001 fbcc 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , SET);
 8000416:	2201      	movs	r2, #1
 8000418:	2120      	movs	r1, #32
 800041a:	4885      	ldr	r0, [pc, #532]	@ (8000630 <display7SegLed+0x31c>)
 800041c:	f001 fbc7 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2140      	movs	r1, #64	@ 0x40
 8000424:	4882      	ldr	r0, [pc, #520]	@ (8000630 <display7SegLed+0x31c>)
 8000426:	f001 fbc2 	bl	8001bae <HAL_GPIO_WritePin>
		break;
 800042a:	e0fc      	b.n	8000626 <display7SegLed+0x312>
	case 3:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2101      	movs	r1, #1
 8000430:	487f      	ldr	r0, [pc, #508]	@ (8000630 <display7SegLed+0x31c>)
 8000432:	f001 fbbc 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2102      	movs	r1, #2
 800043a:	487d      	ldr	r0, [pc, #500]	@ (8000630 <display7SegLed+0x31c>)
 800043c:	f001 fbb7 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2104      	movs	r1, #4
 8000444:	487a      	ldr	r0, [pc, #488]	@ (8000630 <display7SegLed+0x31c>)
 8000446:	f001 fbb2 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2108      	movs	r1, #8
 800044e:	4878      	ldr	r0, [pc, #480]	@ (8000630 <display7SegLed+0x31c>)
 8000450:	f001 fbad 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2110      	movs	r1, #16
 8000458:	4875      	ldr	r0, [pc, #468]	@ (8000630 <display7SegLed+0x31c>)
 800045a:	f001 fba8 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2120      	movs	r1, #32
 8000462:	4873      	ldr	r0, [pc, #460]	@ (8000630 <display7SegLed+0x31c>)
 8000464:	f001 fba3 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2140      	movs	r1, #64	@ 0x40
 800046c:	4870      	ldr	r0, [pc, #448]	@ (8000630 <display7SegLed+0x31c>)
 800046e:	f001 fb9e 	bl	8001bae <HAL_GPIO_WritePin>
		break;
 8000472:	e0d8      	b.n	8000626 <display7SegLed+0x312>
	case 4:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2101      	movs	r1, #1
 8000478:	486d      	ldr	r0, [pc, #436]	@ (8000630 <display7SegLed+0x31c>)
 800047a:	f001 fb98 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2102      	movs	r1, #2
 8000482:	486b      	ldr	r0, [pc, #428]	@ (8000630 <display7SegLed+0x31c>)
 8000484:	f001 fb93 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2104      	movs	r1, #4
 800048c:	4868      	ldr	r0, [pc, #416]	@ (8000630 <display7SegLed+0x31c>)
 800048e:	f001 fb8e 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2108      	movs	r1, #8
 8000496:	4866      	ldr	r0, [pc, #408]	@ (8000630 <display7SegLed+0x31c>)
 8000498:	f001 fb89 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2110      	movs	r1, #16
 80004a0:	4863      	ldr	r0, [pc, #396]	@ (8000630 <display7SegLed+0x31c>)
 80004a2:	f001 fb84 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	4861      	ldr	r0, [pc, #388]	@ (8000630 <display7SegLed+0x31c>)
 80004ac:	f001 fb7f 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2140      	movs	r1, #64	@ 0x40
 80004b4:	485e      	ldr	r0, [pc, #376]	@ (8000630 <display7SegLed+0x31c>)
 80004b6:	f001 fb7a 	bl	8001bae <HAL_GPIO_WritePin>
		break;
 80004ba:	e0b4      	b.n	8000626 <display7SegLed+0x312>
	case 5:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2101      	movs	r1, #1
 80004c0:	485b      	ldr	r0, [pc, #364]	@ (8000630 <display7SegLed+0x31c>)
 80004c2:	f001 fb74 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2102      	movs	r1, #2
 80004ca:	4859      	ldr	r0, [pc, #356]	@ (8000630 <display7SegLed+0x31c>)
 80004cc:	f001 fb6f 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2104      	movs	r1, #4
 80004d4:	4856      	ldr	r0, [pc, #344]	@ (8000630 <display7SegLed+0x31c>)
 80004d6:	f001 fb6a 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2108      	movs	r1, #8
 80004de:	4854      	ldr	r0, [pc, #336]	@ (8000630 <display7SegLed+0x31c>)
 80004e0:	f001 fb65 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2110      	movs	r1, #16
 80004e8:	4851      	ldr	r0, [pc, #324]	@ (8000630 <display7SegLed+0x31c>)
 80004ea:	f001 fb60 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2120      	movs	r1, #32
 80004f2:	484f      	ldr	r0, [pc, #316]	@ (8000630 <display7SegLed+0x31c>)
 80004f4:	f001 fb5b 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2140      	movs	r1, #64	@ 0x40
 80004fc:	484c      	ldr	r0, [pc, #304]	@ (8000630 <display7SegLed+0x31c>)
 80004fe:	f001 fb56 	bl	8001bae <HAL_GPIO_WritePin>
		break;
 8000502:	e090      	b.n	8000626 <display7SegLed+0x312>
	case 6:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2101      	movs	r1, #1
 8000508:	4849      	ldr	r0, [pc, #292]	@ (8000630 <display7SegLed+0x31c>)
 800050a:	f001 fb50 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2102      	movs	r1, #2
 8000512:	4847      	ldr	r0, [pc, #284]	@ (8000630 <display7SegLed+0x31c>)
 8000514:	f001 fb4b 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2104      	movs	r1, #4
 800051c:	4844      	ldr	r0, [pc, #272]	@ (8000630 <display7SegLed+0x31c>)
 800051e:	f001 fb46 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2108      	movs	r1, #8
 8000526:	4842      	ldr	r0, [pc, #264]	@ (8000630 <display7SegLed+0x31c>)
 8000528:	f001 fb41 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2110      	movs	r1, #16
 8000530:	483f      	ldr	r0, [pc, #252]	@ (8000630 <display7SegLed+0x31c>)
 8000532:	f001 fb3c 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2120      	movs	r1, #32
 800053a:	483d      	ldr	r0, [pc, #244]	@ (8000630 <display7SegLed+0x31c>)
 800053c:	f001 fb37 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2140      	movs	r1, #64	@ 0x40
 8000544:	483a      	ldr	r0, [pc, #232]	@ (8000630 <display7SegLed+0x31c>)
 8000546:	f001 fb32 	bl	8001bae <HAL_GPIO_WritePin>
		break;
 800054a:	e06c      	b.n	8000626 <display7SegLed+0x312>
	case 7:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	4837      	ldr	r0, [pc, #220]	@ (8000630 <display7SegLed+0x31c>)
 8000552:	f001 fb2c 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2102      	movs	r1, #2
 800055a:	4835      	ldr	r0, [pc, #212]	@ (8000630 <display7SegLed+0x31c>)
 800055c:	f001 fb27 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2104      	movs	r1, #4
 8000564:	4832      	ldr	r0, [pc, #200]	@ (8000630 <display7SegLed+0x31c>)
 8000566:	f001 fb22 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2108      	movs	r1, #8
 800056e:	4830      	ldr	r0, [pc, #192]	@ (8000630 <display7SegLed+0x31c>)
 8000570:	f001 fb1d 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2110      	movs	r1, #16
 8000578:	482d      	ldr	r0, [pc, #180]	@ (8000630 <display7SegLed+0x31c>)
 800057a:	f001 fb18 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2120      	movs	r1, #32
 8000582:	482b      	ldr	r0, [pc, #172]	@ (8000630 <display7SegLed+0x31c>)
 8000584:	f001 fb13 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2140      	movs	r1, #64	@ 0x40
 800058c:	4828      	ldr	r0, [pc, #160]	@ (8000630 <display7SegLed+0x31c>)
 800058e:	f001 fb0e 	bl	8001bae <HAL_GPIO_WritePin>
		break;
 8000592:	e048      	b.n	8000626 <display7SegLed+0x312>
	case 8:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2101      	movs	r1, #1
 8000598:	4825      	ldr	r0, [pc, #148]	@ (8000630 <display7SegLed+0x31c>)
 800059a:	f001 fb08 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2102      	movs	r1, #2
 80005a2:	4823      	ldr	r0, [pc, #140]	@ (8000630 <display7SegLed+0x31c>)
 80005a4:	f001 fb03 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	4820      	ldr	r0, [pc, #128]	@ (8000630 <display7SegLed+0x31c>)
 80005ae:	f001 fafe 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	481e      	ldr	r0, [pc, #120]	@ (8000630 <display7SegLed+0x31c>)
 80005b8:	f001 faf9 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	481b      	ldr	r0, [pc, #108]	@ (8000630 <display7SegLed+0x31c>)
 80005c2:	f001 faf4 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2120      	movs	r1, #32
 80005ca:	4819      	ldr	r0, [pc, #100]	@ (8000630 <display7SegLed+0x31c>)
 80005cc:	f001 faef 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	@ 0x40
 80005d4:	4816      	ldr	r0, [pc, #88]	@ (8000630 <display7SegLed+0x31c>)
 80005d6:	f001 faea 	bl	8001bae <HAL_GPIO_WritePin>
		break;
 80005da:	e024      	b.n	8000626 <display7SegLed+0x312>
	case 9:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	4813      	ldr	r0, [pc, #76]	@ (8000630 <display7SegLed+0x31c>)
 80005e2:	f001 fae4 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2102      	movs	r1, #2
 80005ea:	4811      	ldr	r0, [pc, #68]	@ (8000630 <display7SegLed+0x31c>)
 80005ec:	f001 fadf 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2104      	movs	r1, #4
 80005f4:	480e      	ldr	r0, [pc, #56]	@ (8000630 <display7SegLed+0x31c>)
 80005f6:	f001 fada 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2108      	movs	r1, #8
 80005fe:	480c      	ldr	r0, [pc, #48]	@ (8000630 <display7SegLed+0x31c>)
 8000600:	f001 fad5 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4809      	ldr	r0, [pc, #36]	@ (8000630 <display7SegLed+0x31c>)
 800060a:	f001 fad0 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2120      	movs	r1, #32
 8000612:	4807      	ldr	r0, [pc, #28]	@ (8000630 <display7SegLed+0x31c>)
 8000614:	f001 facb 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2140      	movs	r1, #64	@ 0x40
 800061c:	4804      	ldr	r0, [pc, #16]	@ (8000630 <display7SegLed+0x31c>)
 800061e:	f001 fac6 	bl	8001bae <HAL_GPIO_WritePin>
		break;
 8000622:	e000      	b.n	8000626 <display7SegLed+0x312>
	default:
		break;
 8000624:	bf00      	nop
	}
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40010c00 	.word	0x40010c00

08000634 <updateBufer>:



void updateBufer(){
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
    led_buffer[0] = (time13 > 99) ? 9 : (time13 / 10);
 8000638:	4b26      	ldr	r3, [pc, #152]	@ (80006d4 <updateBufer+0xa0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b63      	cmp	r3, #99	@ 0x63
 800063e:	dc08      	bgt.n	8000652 <updateBufer+0x1e>
 8000640:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <updateBufer+0xa0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <updateBufer+0xa4>)
 8000646:	fb82 1203 	smull	r1, r2, r2, r3
 800064a:	1092      	asrs	r2, r2, #2
 800064c:	17db      	asrs	r3, r3, #31
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	e000      	b.n	8000654 <updateBufer+0x20>
 8000652:	2309      	movs	r3, #9
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <updateBufer+0xa8>)
 8000656:	6013      	str	r3, [r2, #0]
    led_buffer[1] = (time13 > 99) ? 9 : (time13 % 10);
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <updateBufer+0xa0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b63      	cmp	r3, #99	@ 0x63
 800065e:	dc0d      	bgt.n	800067c <updateBufer+0x48>
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <updateBufer+0xa0>)
 8000662:	6819      	ldr	r1, [r3, #0]
 8000664:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <updateBufer+0xa4>)
 8000666:	fb83 2301 	smull	r2, r3, r3, r1
 800066a:	109a      	asrs	r2, r3, #2
 800066c:	17cb      	asrs	r3, r1, #31
 800066e:	1ad2      	subs	r2, r2, r3
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1aca      	subs	r2, r1, r3
 800067a:	e000      	b.n	800067e <updateBufer+0x4a>
 800067c:	2209      	movs	r2, #9
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <updateBufer+0xa8>)
 8000680:	605a      	str	r2, [r3, #4]

    led_buffer[2] = (time24 > 99) ? 9 : (time24 / 10);
 8000682:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <updateBufer+0xac>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b63      	cmp	r3, #99	@ 0x63
 8000688:	dc08      	bgt.n	800069c <updateBufer+0x68>
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <updateBufer+0xac>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <updateBufer+0xa4>)
 8000690:	fb82 1203 	smull	r1, r2, r2, r3
 8000694:	1092      	asrs	r2, r2, #2
 8000696:	17db      	asrs	r3, r3, #31
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	e000      	b.n	800069e <updateBufer+0x6a>
 800069c:	2309      	movs	r3, #9
 800069e:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <updateBufer+0xa8>)
 80006a0:	6093      	str	r3, [r2, #8]
    led_buffer[3] = (time24 > 99) ? 9 : (time24 % 10);
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <updateBufer+0xac>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b63      	cmp	r3, #99	@ 0x63
 80006a8:	dc0d      	bgt.n	80006c6 <updateBufer+0x92>
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <updateBufer+0xac>)
 80006ac:	6819      	ldr	r1, [r3, #0]
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <updateBufer+0xa4>)
 80006b0:	fb83 2301 	smull	r2, r3, r3, r1
 80006b4:	109a      	asrs	r2, r3, #2
 80006b6:	17cb      	asrs	r3, r1, #31
 80006b8:	1ad2      	subs	r2, r2, r3
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	1aca      	subs	r2, r1, r3
 80006c4:	e000      	b.n	80006c8 <updateBufer+0x94>
 80006c6:	2209      	movs	r2, #9
 80006c8:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <updateBufer+0xa8>)
 80006ca:	60da      	str	r2, [r3, #12]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	200000b0 	.word	0x200000b0
 80006d8:	66666667 	.word	0x66666667
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	200000b4 	.word	0x200000b4

080006e4 <update7SegLed>:

void update7SegLed(int index){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2180      	movs	r1, #128	@ 0x80
 80006f0:	482b      	ldr	r0, [pc, #172]	@ (80007a0 <update7SegLed+0xbc>)
 80006f2:	f001 fa5c 	bl	8001bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fc:	4828      	ldr	r0, [pc, #160]	@ (80007a0 <update7SegLed+0xbc>)
 80006fe:	f001 fa56 	bl	8001bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000708:	4825      	ldr	r0, [pc, #148]	@ (80007a0 <update7SegLed+0xbc>)
 800070a:	f001 fa50 	bl	8001bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en4_GPIO_Port, en4_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000714:	4822      	ldr	r0, [pc, #136]	@ (80007a0 <update7SegLed+0xbc>)
 8000716:	f001 fa4a 	bl	8001bae <HAL_GPIO_WritePin>

    switch(index){
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d83a      	bhi.n	8000796 <update7SegLed+0xb2>
 8000720:	a201      	add	r2, pc, #4	@ (adr r2, 8000728 <update7SegLed+0x44>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000739 	.word	0x08000739
 800072c:	0800074f 	.word	0x0800074f
 8000730:	08000767 	.word	0x08000767
 8000734:	0800077f 	.word	0x0800077f
    case 0:
    	HAL_GPIO_WritePin(en1_GPIO_Port , en1_Pin , RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2180      	movs	r1, #128	@ 0x80
 800073c:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <update7SegLed+0xbc>)
 800073e:	f001 fa36 	bl	8001bae <HAL_GPIO_WritePin>
    	display7SegLed(led_buffer[0]);
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <update7SegLed+0xc0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fde4 	bl	8000314 <display7SegLed>
    	break;
 800074c:	e024      	b.n	8000798 <update7SegLed+0xb4>
    case 1:
    	HAL_GPIO_WritePin(en2_GPIO_Port , en2_Pin , RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000754:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <update7SegLed+0xbc>)
 8000756:	f001 fa2a 	bl	8001bae <HAL_GPIO_WritePin>
    	display7SegLed(led_buffer[1]);
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <update7SegLed+0xc0>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fdd8 	bl	8000314 <display7SegLed>
    	break;
 8000764:	e018      	b.n	8000798 <update7SegLed+0xb4>
    case 2:
    	HAL_GPIO_WritePin(en3_GPIO_Port , en3_Pin , RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <update7SegLed+0xbc>)
 800076e:	f001 fa1e 	bl	8001bae <HAL_GPIO_WritePin>
    	display7SegLed(led_buffer[2]);
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <update7SegLed+0xc0>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fdcc 	bl	8000314 <display7SegLed>
    	break;
 800077c:	e00c      	b.n	8000798 <update7SegLed+0xb4>
    case 3:
    	HAL_GPIO_WritePin(en4_GPIO_Port , en4_Pin , RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000784:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <update7SegLed+0xbc>)
 8000786:	f001 fa12 	bl	8001bae <HAL_GPIO_WritePin>
    	display7SegLed(led_buffer[3]);
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <update7SegLed+0xc0>)
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fdc0 	bl	8000314 <display7SegLed>
    	break;
 8000794:	e000      	b.n	8000798 <update7SegLed+0xb4>
    default:
    	break;
 8000796:	bf00      	nop
    }
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40010c00 	.word	0x40010c00
 80007a4:	2000008c 	.word	0x2000008c

080007a8 <updateTimeForState>:

void updateTimeForState(int status){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	switch(status){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b02      	subs	r3, #2
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d82b      	bhi.n	8000810 <updateTimeForState+0x68>
 80007b8:	a201      	add	r2, pc, #4	@ (adr r2, 80007c0 <updateTimeForState+0x18>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	080007d1 	.word	0x080007d1
 80007c4:	080007e3 	.word	0x080007e3
 80007c8:	080007ef 	.word	0x080007ef
 80007cc:	08000805 	.word	0x08000805
	case RED13_GREEN24:
		time13 = timeRed;
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <updateTimeForState+0x74>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <updateTimeForState+0x78>)
 80007d6:	6013      	str	r3, [r2, #0]
		time24 = timeGreen;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <updateTimeForState+0x7c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <updateTimeForState+0x80>)
 80007de:	6013      	str	r3, [r2, #0]
		break;
 80007e0:	e017      	b.n	8000812 <updateTimeForState+0x6a>
	case RED13_YELLOW24:
		time24 = timeYellow+1;
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <updateTimeForState+0x84>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <updateTimeForState+0x80>)
 80007ea:	6013      	str	r3, [r2, #0]
		break;
 80007ec:	e011      	b.n	8000812 <updateTimeForState+0x6a>
	case GREEN13_RED24:
		time13 = timeGreen+1;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <updateTimeForState+0x7c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <updateTimeForState+0x78>)
 80007f6:	6013      	str	r3, [r2, #0]
		time24 = timeRed+1;
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <updateTimeForState+0x74>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <updateTimeForState+0x80>)
 8000800:	6013      	str	r3, [r2, #0]
		break;
 8000802:	e006      	b.n	8000812 <updateTimeForState+0x6a>
	case YELLOW13_RED24:
		time13 = timeYellow+1;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <updateTimeForState+0x84>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <updateTimeForState+0x78>)
 800080c:	6013      	str	r3, [r2, #0]
		break;
 800080e:	e000      	b.n	8000812 <updateTimeForState+0x6a>
	default:
		break;
 8000810:	bf00      	nop
	}
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	20000040 	.word	0x20000040
 8000820:	200000b0 	.word	0x200000b0
 8000824:	20000044 	.word	0x20000044
 8000828:	200000b4 	.word	0x200000b4
 800082c:	20000048 	.word	0x20000048

08000830 <turnOffAll7Seg>:

void turnOffAll7Seg(){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2180      	movs	r1, #128	@ 0x80
 8000838:	480b      	ldr	r0, [pc, #44]	@ (8000868 <turnOffAll7Seg+0x38>)
 800083a:	f001 f9b8 	bl	8001bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000844:	4808      	ldr	r0, [pc, #32]	@ (8000868 <turnOffAll7Seg+0x38>)
 8000846:	f001 f9b2 	bl	8001bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000850:	4805      	ldr	r0, [pc, #20]	@ (8000868 <turnOffAll7Seg+0x38>)
 8000852:	f001 f9ac 	bl	8001bae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en4_GPIO_Port, en4_Pin, SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800085c:	4802      	ldr	r0, [pc, #8]	@ (8000868 <turnOffAll7Seg+0x38>)
 800085e:	f001 f9a6 	bl	8001bae <HAL_GPIO_WritePin>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010c00 	.word	0x40010c00

0800086c <fsm_automatic>:
#include "fsm_automatic.h"

int led_index;

void fsm_automatic(){
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	switch(status){
 8000870:	4ba0      	ldr	r3, [pc, #640]	@ (8000af4 <fsm_automatic+0x288>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3b01      	subs	r3, #1
 8000876:	2b04      	cmp	r3, #4
 8000878:	f200 8247 	bhi.w	8000d0a <fsm_automatic+0x49e>
 800087c:	a201      	add	r2, pc, #4	@ (adr r2, 8000884 <fsm_automatic+0x18>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	08000899 	.word	0x08000899
 8000888:	080008dd 	.word	0x080008dd
 800088c:	080009ef 	.word	0x080009ef
 8000890:	08000b15 	.word	0x08000b15
 8000894:	08000c1b 	.word	0x08000c1b
	case INIT:
		turnOffAll7Seg();
 8000898:	f7ff ffca 	bl	8000830 <turnOffAll7Seg>
		status = RED13_GREEN24;
 800089c:	4b95      	ldr	r3, [pc, #596]	@ (8000af4 <fsm_automatic+0x288>)
 800089e:	2202      	movs	r2, #2
 80008a0:	601a      	str	r2, [r3, #0]
		led_index = 0;
 80008a2:	4b95      	ldr	r3, [pc, #596]	@ (8000af8 <fsm_automatic+0x28c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
		setTimer(1 , timeGreen*1000);
 80008a8:	4b94      	ldr	r3, [pc, #592]	@ (8000afc <fsm_automatic+0x290>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b0:	fb02 f303 	mul.w	r3, r2, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	2001      	movs	r0, #1
 80008b8:	f000 fd48 	bl	800134c <setTimer>
		//setTimer(2 , 250);
		timer_flag[2] = 1;
 80008bc:	4b90      	ldr	r3, [pc, #576]	@ (8000b00 <fsm_automatic+0x294>)
 80008be:	2201      	movs	r2, #1
 80008c0:	609a      	str	r2, [r3, #8]
		setTimer(0 , 1000);
 80008c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 fd40 	bl	800134c <setTimer>

		updateTimeForState(status);
 80008cc:	4b89      	ldr	r3, [pc, #548]	@ (8000af4 <fsm_automatic+0x288>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff69 	bl	80007a8 <updateTimeForState>
		updateBufer();
 80008d6:	f7ff fead 	bl	8000634 <updateBufer>
		break;
 80008da:	e21f      	b.n	8000d1c <fsm_automatic+0x4b0>
////////////////////////////////////////////////
	case RED13_GREEN24:
		//set cho lane 13
		HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2120      	movs	r1, #32
 80008e0:	4888      	ldr	r0, [pc, #544]	@ (8000b04 <fsm_automatic+0x298>)
 80008e2:	f001 f964 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2140      	movs	r1, #64	@ 0x40
 80008ea:	4886      	ldr	r0, [pc, #536]	@ (8000b04 <fsm_automatic+0x298>)
 80008ec:	f001 f95f 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2180      	movs	r1, #128	@ 0x80
 80008f4:	4883      	ldr	r0, [pc, #524]	@ (8000b04 <fsm_automatic+0x298>)
 80008f6:	f001 f95a 	bl	8001bae <HAL_GPIO_WritePin>
		//set cho lane 24
		HAL_GPIO_WritePin(RED_24_GPIO_Port , RED_24_Pin , GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000900:	4880      	ldr	r0, [pc, #512]	@ (8000b04 <fsm_automatic+0x298>)
 8000902:	f001 f954 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin , GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800090c:	487d      	ldr	r0, [pc, #500]	@ (8000b04 <fsm_automatic+0x298>)
 800090e:	f001 f94e 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_24_GPIO_Port , GREEN_24_Pin , GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000918:	487a      	ldr	r0, [pc, #488]	@ (8000b04 <fsm_automatic+0x298>)
 800091a:	f001 f948 	bl	8001bae <HAL_GPIO_WritePin>

		if(isTimerFlagSet(1)){
 800091e:	2001      	movs	r0, #1
 8000920:	f000 fd3a 	bl	8001398 <isTimerFlagSet>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d011      	beq.n	800094e <fsm_automatic+0xe2>
			status = RED13_YELLOW24;
 800092a:	4b72      	ldr	r3, [pc, #456]	@ (8000af4 <fsm_automatic+0x288>)
 800092c:	2203      	movs	r2, #3
 800092e:	601a      	str	r2, [r3, #0]
			setTimer(1 , timeYellow*1000);
 8000930:	4b75      	ldr	r3, [pc, #468]	@ (8000b08 <fsm_automatic+0x29c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	4619      	mov	r1, r3
 800093e:	2001      	movs	r0, #1
 8000940:	f000 fd04 	bl	800134c <setTimer>
			updateTimeForState(status);
 8000944:	4b6b      	ldr	r3, [pc, #428]	@ (8000af4 <fsm_automatic+0x288>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff2d 	bl	80007a8 <updateTimeForState>
		}
		if(isTimerFlagSet(0)){
 800094e:	2000      	movs	r0, #0
 8000950:	f000 fd22 	bl	8001398 <isTimerFlagSet>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d010      	beq.n	800097c <fsm_automatic+0x110>
			time13--;
 800095a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b0c <fsm_automatic+0x2a0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	4a6a      	ldr	r2, [pc, #424]	@ (8000b0c <fsm_automatic+0x2a0>)
 8000962:	6013      	str	r3, [r2, #0]
			time24--;
 8000964:	4b6a      	ldr	r3, [pc, #424]	@ (8000b10 <fsm_automatic+0x2a4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3b01      	subs	r3, #1
 800096a:	4a69      	ldr	r2, [pc, #420]	@ (8000b10 <fsm_automatic+0x2a4>)
 800096c:	6013      	str	r3, [r2, #0]
			updateBufer();
 800096e:	f7ff fe61 	bl	8000634 <updateBufer>
			setTimer(0 , 1000);
 8000972:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000976:	2000      	movs	r0, #0
 8000978:	f000 fce8 	bl	800134c <setTimer>
		}
		if(isTimerFlagSet(2)){
 800097c:	2002      	movs	r0, #2
 800097e:	f000 fd0b 	bl	8001398 <isTimerFlagSet>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d014      	beq.n	80009b2 <fsm_automatic+0x146>
			setTimer(2 , 250);
 8000988:	21fa      	movs	r1, #250	@ 0xfa
 800098a:	2002      	movs	r0, #2
 800098c:	f000 fcde 	bl	800134c <setTimer>
			update7SegLed(led_index);
 8000990:	4b59      	ldr	r3, [pc, #356]	@ (8000af8 <fsm_automatic+0x28c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fea5 	bl	80006e4 <update7SegLed>
			led_index++;
 800099a:	4b57      	ldr	r3, [pc, #348]	@ (8000af8 <fsm_automatic+0x28c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	4a55      	ldr	r2, [pc, #340]	@ (8000af8 <fsm_automatic+0x28c>)
 80009a2:	6013      	str	r3, [r2, #0]
			if(led_index >= 4){
 80009a4:	4b54      	ldr	r3, [pc, #336]	@ (8000af8 <fsm_automatic+0x28c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	dd02      	ble.n	80009b2 <fsm_automatic+0x146>
				led_index = 0;
 80009ac:	4b52      	ldr	r3, [pc, #328]	@ (8000af8 <fsm_automatic+0x28c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButtonPressed(MODE_BUTTON)==1){
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fbca 	bl	800014c <isButtonPressed>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	f040 81a7 	bne.w	8000d0e <fsm_automatic+0x4a2>
			status = MODIFY_RED;
 80009c0:	4b4c      	ldr	r3, [pc, #304]	@ (8000af4 <fsm_automatic+0x288>)
 80009c2:	220b      	movs	r2, #11
 80009c4:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 80009c6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80009ca:	2001      	movs	r0, #1
 80009cc:	f000 fcbe 	bl	800134c <setTimer>
			led_index = 0;
 80009d0:	4b49      	ldr	r3, [pc, #292]	@ (8000af8 <fsm_automatic+0x28c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
			timer_flag[2] = 1;
 80009d6:	4b4a      	ldr	r3, [pc, #296]	@ (8000b00 <fsm_automatic+0x294>)
 80009d8:	2201      	movs	r2, #1
 80009da:	609a      	str	r2, [r3, #8]

			turnOffAll7Seg();
 80009dc:	f7ff ff28 	bl	8000830 <turnOffAll7Seg>
			turnoff_red();
 80009e0:	f000 fb68 	bl	80010b4 <turnoff_red>
			turnoff_yellow();
 80009e4:	f000 fb78 	bl	80010d8 <turnoff_yellow>
			turnoff_green();
 80009e8:	f000 fb88 	bl	80010fc <turnoff_green>
		}
		break;
 80009ec:	e18f      	b.n	8000d0e <fsm_automatic+0x4a2>
//////////////////////////////////////////////
	case RED13_YELLOW24:
		//set cho lane 13
		HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2120      	movs	r1, #32
 80009f2:	4844      	ldr	r0, [pc, #272]	@ (8000b04 <fsm_automatic+0x298>)
 80009f4:	f001 f8db 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2140      	movs	r1, #64	@ 0x40
 80009fc:	4841      	ldr	r0, [pc, #260]	@ (8000b04 <fsm_automatic+0x298>)
 80009fe:	f001 f8d6 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	483f      	ldr	r0, [pc, #252]	@ (8000b04 <fsm_automatic+0x298>)
 8000a08:	f001 f8d1 	bl	8001bae <HAL_GPIO_WritePin>
		//set cho lane 24
		HAL_GPIO_WritePin(RED_24_GPIO_Port , RED_24_Pin , GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a12:	483c      	ldr	r0, [pc, #240]	@ (8000b04 <fsm_automatic+0x298>)
 8000a14:	f001 f8cb 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin , GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a1e:	4839      	ldr	r0, [pc, #228]	@ (8000b04 <fsm_automatic+0x298>)
 8000a20:	f001 f8c5 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_24_GPIO_Port , GREEN_24_Pin , GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a2a:	4836      	ldr	r0, [pc, #216]	@ (8000b04 <fsm_automatic+0x298>)
 8000a2c:	f001 f8bf 	bl	8001bae <HAL_GPIO_WritePin>

		if(isTimerFlagSet(1) == 1){
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 fcb1 	bl	8001398 <isTimerFlagSet>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d111      	bne.n	8000a60 <fsm_automatic+0x1f4>
			status = GREEN13_RED24;
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000af4 <fsm_automatic+0x288>)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	601a      	str	r2, [r3, #0]
			setTimer(1 , timeGreen*1000);
 8000a42:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <fsm_automatic+0x290>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 fc7b 	bl	800134c <setTimer>
			updateTimeForState(status);
 8000a56:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <fsm_automatic+0x288>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fea4 	bl	80007a8 <updateTimeForState>
		}
		if(isTimerFlagSet(0)){
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fc99 	bl	8001398 <isTimerFlagSet>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d010      	beq.n	8000a8e <fsm_automatic+0x222>
			time13--;
 8000a6c:	4b27      	ldr	r3, [pc, #156]	@ (8000b0c <fsm_automatic+0x2a0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3b01      	subs	r3, #1
 8000a72:	4a26      	ldr	r2, [pc, #152]	@ (8000b0c <fsm_automatic+0x2a0>)
 8000a74:	6013      	str	r3, [r2, #0]
			time24--;
 8000a76:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <fsm_automatic+0x2a4>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4a24      	ldr	r2, [pc, #144]	@ (8000b10 <fsm_automatic+0x2a4>)
 8000a7e:	6013      	str	r3, [r2, #0]
			updateBufer();
 8000a80:	f7ff fdd8 	bl	8000634 <updateBufer>
			setTimer(0 , 1000);
 8000a84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f000 fc5f 	bl	800134c <setTimer>
		}
		if(isTimerFlagSet(2)){
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f000 fc82 	bl	8001398 <isTimerFlagSet>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d014      	beq.n	8000ac4 <fsm_automatic+0x258>
			update7SegLed(led_index);
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <fsm_automatic+0x28c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fe20 	bl	80006e4 <update7SegLed>
			setTimer(2 , 250);
 8000aa4:	21fa      	movs	r1, #250	@ 0xfa
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f000 fc50 	bl	800134c <setTimer>
			led_index++;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <fsm_automatic+0x28c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	4a11      	ldr	r2, [pc, #68]	@ (8000af8 <fsm_automatic+0x28c>)
 8000ab4:	6013      	str	r3, [r2, #0]
			if(led_index >= 4){
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <fsm_automatic+0x28c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	dd02      	ble.n	8000ac4 <fsm_automatic+0x258>
				led_index = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <fsm_automatic+0x28c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButtonPressed(MODE_BUTTON)==1){
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fb41 	bl	800014c <isButtonPressed>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	f040 8120 	bne.w	8000d12 <fsm_automatic+0x4a6>
			status = MODIFY_RED;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <fsm_automatic+0x288>)
 8000ad4:	220b      	movs	r2, #11
 8000ad6:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000ad8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000adc:	2001      	movs	r0, #1
 8000ade:	f000 fc35 	bl	800134c <setTimer>

			turnOffAll7Seg();
 8000ae2:	f7ff fea5 	bl	8000830 <turnOffAll7Seg>
			turnoff_red();
 8000ae6:	f000 fae5 	bl	80010b4 <turnoff_red>
			turnoff_yellow();
 8000aea:	f000 faf5 	bl	80010d8 <turnoff_yellow>
			turnoff_green();
 8000aee:	f000 fb05 	bl	80010fc <turnoff_green>
		}
		break;
 8000af2:	e10e      	b.n	8000d12 <fsm_automatic+0x4a6>
 8000af4:	200000ac 	.word	0x200000ac
 8000af8:	2000009c 	.word	0x2000009c
 8000afc:	20000044 	.word	0x20000044
 8000b00:	20000114 	.word	0x20000114
 8000b04:	40010800 	.word	0x40010800
 8000b08:	20000048 	.word	0x20000048
 8000b0c:	200000b0 	.word	0x200000b0
 8000b10:	200000b4 	.word	0x200000b4
/////////////////////////////////////////////////
	case GREEN13_RED24:
		//set cho lane 13
		HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2120      	movs	r1, #32
 8000b18:	4881      	ldr	r0, [pc, #516]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000b1a:	f001 f848 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2140      	movs	r1, #64	@ 0x40
 8000b22:	487f      	ldr	r0, [pc, #508]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000b24:	f001 f843 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2180      	movs	r1, #128	@ 0x80
 8000b2c:	487c      	ldr	r0, [pc, #496]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000b2e:	f001 f83e 	bl	8001bae <HAL_GPIO_WritePin>
		//set cho lane 24
		HAL_GPIO_WritePin(RED_24_GPIO_Port , RED_24_Pin , GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b38:	4879      	ldr	r0, [pc, #484]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000b3a:	f001 f838 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin , GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4876      	ldr	r0, [pc, #472]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000b46:	f001 f832 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_24_GPIO_Port , GREEN_24_Pin , GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b50:	4873      	ldr	r0, [pc, #460]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000b52:	f001 f82c 	bl	8001bae <HAL_GPIO_WritePin>

		if(isTimerFlagSet(1) == 1){
 8000b56:	2001      	movs	r0, #1
 8000b58:	f000 fc1e 	bl	8001398 <isTimerFlagSet>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d111      	bne.n	8000b86 <fsm_automatic+0x31a>
			status = YELLOW13_RED24;
 8000b62:	4b70      	ldr	r3, [pc, #448]	@ (8000d24 <fsm_automatic+0x4b8>)
 8000b64:	2205      	movs	r2, #5
 8000b66:	601a      	str	r2, [r3, #0]
			setTimer(1 , timeYellow*1000);
 8000b68:	4b6f      	ldr	r3, [pc, #444]	@ (8000d28 <fsm_automatic+0x4bc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 fbe8 	bl	800134c <setTimer>
			updateTimeForState(status);
 8000b7c:	4b69      	ldr	r3, [pc, #420]	@ (8000d24 <fsm_automatic+0x4b8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fe11 	bl	80007a8 <updateTimeForState>
		}
		if(isTimerFlagSet(0)){
 8000b86:	2000      	movs	r0, #0
 8000b88:	f000 fc06 	bl	8001398 <isTimerFlagSet>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d010      	beq.n	8000bb4 <fsm_automatic+0x348>
			time13--;
 8000b92:	4b66      	ldr	r3, [pc, #408]	@ (8000d2c <fsm_automatic+0x4c0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	4a64      	ldr	r2, [pc, #400]	@ (8000d2c <fsm_automatic+0x4c0>)
 8000b9a:	6013      	str	r3, [r2, #0]
			time24--;
 8000b9c:	4b64      	ldr	r3, [pc, #400]	@ (8000d30 <fsm_automatic+0x4c4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	4a63      	ldr	r2, [pc, #396]	@ (8000d30 <fsm_automatic+0x4c4>)
 8000ba4:	6013      	str	r3, [r2, #0]
			updateBufer();
 8000ba6:	f7ff fd45 	bl	8000634 <updateBufer>
			setTimer(0 , 1000);
 8000baa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 fbcc 	bl	800134c <setTimer>
		}
		if(isTimerFlagSet(2)){
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f000 fbef 	bl	8001398 <isTimerFlagSet>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d014      	beq.n	8000bea <fsm_automatic+0x37e>
			update7SegLed(led_index);
 8000bc0:	4b5c      	ldr	r3, [pc, #368]	@ (8000d34 <fsm_automatic+0x4c8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd8d 	bl	80006e4 <update7SegLed>
			setTimer(2 , 250);
 8000bca:	21fa      	movs	r1, #250	@ 0xfa
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f000 fbbd 	bl	800134c <setTimer>
			led_index++;
 8000bd2:	4b58      	ldr	r3, [pc, #352]	@ (8000d34 <fsm_automatic+0x4c8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a56      	ldr	r2, [pc, #344]	@ (8000d34 <fsm_automatic+0x4c8>)
 8000bda:	6013      	str	r3, [r2, #0]
			if(led_index >= 4){
 8000bdc:	4b55      	ldr	r3, [pc, #340]	@ (8000d34 <fsm_automatic+0x4c8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	dd02      	ble.n	8000bea <fsm_automatic+0x37e>
				led_index = 0;
 8000be4:	4b53      	ldr	r3, [pc, #332]	@ (8000d34 <fsm_automatic+0x4c8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButtonPressed(MODE_BUTTON)==1){
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff faae 	bl	800014c <isButtonPressed>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	f040 808f 	bne.w	8000d16 <fsm_automatic+0x4aa>
			status = MODIFY_RED;
 8000bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8000d24 <fsm_automatic+0x4b8>)
 8000bfa:	220b      	movs	r2, #11
 8000bfc:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000bfe:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 fba2 	bl	800134c <setTimer>
			turnOffAll7Seg();
 8000c08:	f7ff fe12 	bl	8000830 <turnOffAll7Seg>
			turnoff_red();
 8000c0c:	f000 fa52 	bl	80010b4 <turnoff_red>
			turnoff_yellow();
 8000c10:	f000 fa62 	bl	80010d8 <turnoff_yellow>
			turnoff_green();
 8000c14:	f000 fa72 	bl	80010fc <turnoff_green>
		}
		break;
 8000c18:	e07d      	b.n	8000d16 <fsm_automatic+0x4aa>
///////////////////////////////////////////////////
	case YELLOW13_RED24:
		//set cho lane 13
		HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	4840      	ldr	r0, [pc, #256]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000c20:	f000 ffc5 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2140      	movs	r1, #64	@ 0x40
 8000c28:	483d      	ldr	r0, [pc, #244]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000c2a:	f000 ffc0 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	483b      	ldr	r0, [pc, #236]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000c34:	f000 ffbb 	bl	8001bae <HAL_GPIO_WritePin>
		//set cho lane 24
		HAL_GPIO_WritePin(RED_24_GPIO_Port , RED_24_Pin , GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c3e:	4838      	ldr	r0, [pc, #224]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000c40:	f000 ffb5 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin , GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c4a:	4835      	ldr	r0, [pc, #212]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000c4c:	f000 ffaf 	bl	8001bae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_24_GPIO_Port , GREEN_24_Pin , GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c56:	4832      	ldr	r0, [pc, #200]	@ (8000d20 <fsm_automatic+0x4b4>)
 8000c58:	f000 ffa9 	bl	8001bae <HAL_GPIO_WritePin>

		if(isTimerFlagSet(1) == 1){
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f000 fb9b 	bl	8001398 <isTimerFlagSet>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d107      	bne.n	8000c78 <fsm_automatic+0x40c>
			status = INIT;
 8000c68:	4b2e      	ldr	r3, [pc, #184]	@ (8000d24 <fsm_automatic+0x4b8>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]
			//setTimer(1 , timeGreen*1000);
			updateTimeForState(status);
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <fsm_automatic+0x4b8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fd98 	bl	80007a8 <updateTimeForState>
		}
		if(isTimerFlagSet(0)){
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f000 fb8d 	bl	8001398 <isTimerFlagSet>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d010      	beq.n	8000ca6 <fsm_automatic+0x43a>
			time13--;
 8000c84:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <fsm_automatic+0x4c0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	4a28      	ldr	r2, [pc, #160]	@ (8000d2c <fsm_automatic+0x4c0>)
 8000c8c:	6013      	str	r3, [r2, #0]
			time24--;
 8000c8e:	4b28      	ldr	r3, [pc, #160]	@ (8000d30 <fsm_automatic+0x4c4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	4a26      	ldr	r2, [pc, #152]	@ (8000d30 <fsm_automatic+0x4c4>)
 8000c96:	6013      	str	r3, [r2, #0]
			updateBufer();
 8000c98:	f7ff fccc 	bl	8000634 <updateBufer>
			setTimer(0 , 1000);
 8000c9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 fb53 	bl	800134c <setTimer>
		}
		if(isTimerFlagSet(2)){
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f000 fb76 	bl	8001398 <isTimerFlagSet>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d014      	beq.n	8000cdc <fsm_automatic+0x470>
			update7SegLed(led_index);
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <fsm_automatic+0x4c8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fd14 	bl	80006e4 <update7SegLed>
			setTimer(2 , 250);
 8000cbc:	21fa      	movs	r1, #250	@ 0xfa
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f000 fb44 	bl	800134c <setTimer>
			led_index++;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <fsm_automatic+0x4c8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a1a      	ldr	r2, [pc, #104]	@ (8000d34 <fsm_automatic+0x4c8>)
 8000ccc:	6013      	str	r3, [r2, #0]
			if(led_index >= 4){
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <fsm_automatic+0x4c8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	dd02      	ble.n	8000cdc <fsm_automatic+0x470>
				led_index = 0;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <fsm_automatic+0x4c8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
			}
		}
		if(isButtonPressed(MODE_BUTTON)==1){
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fa35 	bl	800014c <isButtonPressed>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d118      	bne.n	8000d1a <fsm_automatic+0x4ae>
			status = MODIFY_RED;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <fsm_automatic+0x4b8>)
 8000cea:	220b      	movs	r2, #11
 8000cec:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000cee:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f000 fb2a 	bl	800134c <setTimer>
			turnOffAll7Seg();
 8000cf8:	f7ff fd9a 	bl	8000830 <turnOffAll7Seg>
			turnoff_red();
 8000cfc:	f000 f9da 	bl	80010b4 <turnoff_red>
			turnoff_yellow();
 8000d00:	f000 f9ea 	bl	80010d8 <turnoff_yellow>
			turnoff_green();
 8000d04:	f000 f9fa 	bl	80010fc <turnoff_green>
		}
		break;
 8000d08:	e007      	b.n	8000d1a <fsm_automatic+0x4ae>
	default:
		break;
 8000d0a:	bf00      	nop
 8000d0c:	e006      	b.n	8000d1c <fsm_automatic+0x4b0>
		break;
 8000d0e:	bf00      	nop
 8000d10:	e004      	b.n	8000d1c <fsm_automatic+0x4b0>
		break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <fsm_automatic+0x4b0>
		break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <fsm_automatic+0x4b0>
		break;
 8000d1a:	bf00      	nop
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40010800 	.word	0x40010800
 8000d24:	200000ac 	.word	0x200000ac
 8000d28:	20000048 	.word	0x20000048
 8000d2c:	200000b0 	.word	0x200000b0
 8000d30:	200000b4 	.word	0x200000b4
 8000d34:	2000009c 	.word	0x2000009c

08000d38 <fsm_manual>:
#include "fsm_manual.h"
#include "fsm_automatic.h"

int index = 0;
int temp_time = 1;
void fsm_manual(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	switch(status){
 8000d3c:	4b8f      	ldr	r3, [pc, #572]	@ (8000f7c <fsm_manual+0x244>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b0d      	cmp	r3, #13
 8000d42:	f000 8104 	beq.w	8000f4e <fsm_manual+0x216>
 8000d46:	2b0d      	cmp	r3, #13
 8000d48:	f300 8194 	bgt.w	8001074 <fsm_manual+0x33c>
 8000d4c:	2b0b      	cmp	r3, #11
 8000d4e:	d002      	beq.n	8000d56 <fsm_manual+0x1e>
 8000d50:	2b0c      	cmp	r3, #12
 8000d52:	d07e      	beq.n	8000e52 <fsm_manual+0x11a>



		break;
	default:
		break;
 8000d54:	e18e      	b.n	8001074 <fsm_manual+0x33c>
		temp_timeRed = timeRed;
 8000d56:	4b8a      	ldr	r3, [pc, #552]	@ (8000f80 <fsm_manual+0x248>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a8a      	ldr	r2, [pc, #552]	@ (8000f84 <fsm_manual+0x24c>)
 8000d5c:	6013      	str	r3, [r2, #0]
		time13 = temp_time;
 8000d5e:	4b8a      	ldr	r3, [pc, #552]	@ (8000f88 <fsm_manual+0x250>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a8a      	ldr	r2, [pc, #552]	@ (8000f8c <fsm_manual+0x254>)
 8000d64:	6013      	str	r3, [r2, #0]
		time24 = 2;
 8000d66:	4b8a      	ldr	r3, [pc, #552]	@ (8000f90 <fsm_manual+0x258>)
 8000d68:	2202      	movs	r2, #2
 8000d6a:	601a      	str	r2, [r3, #0]
		if(isTimerFlagSet(1)==1){
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f000 fb13 	bl	8001398 <isTimerFlagSet>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d10d      	bne.n	8000d94 <fsm_manual+0x5c>
			HAL_GPIO_TogglePin(RED_13_GPIO_Port , RED_13_Pin);
 8000d78:	2120      	movs	r1, #32
 8000d7a:	4886      	ldr	r0, [pc, #536]	@ (8000f94 <fsm_manual+0x25c>)
 8000d7c:	f000 ff2f 	bl	8001bde <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_24_GPIO_Port , RED_24_Pin);
 8000d80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d84:	4883      	ldr	r0, [pc, #524]	@ (8000f94 <fsm_manual+0x25c>)
 8000d86:	f000 ff2a 	bl	8001bde <HAL_GPIO_TogglePin>
			setTimer(1 , 500);
 8000d8a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 fadc 	bl	800134c <setTimer>
		if(isTimerFlagSet(2)){
 8000d94:	2002      	movs	r0, #2
 8000d96:	f000 faff 	bl	8001398 <isTimerFlagSet>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d016      	beq.n	8000dce <fsm_manual+0x96>
			setTimer(2 , 250);
 8000da0:	21fa      	movs	r1, #250	@ 0xfa
 8000da2:	2002      	movs	r0, #2
 8000da4:	f000 fad2 	bl	800134c <setTimer>
			updateBufer();
 8000da8:	f7ff fc44 	bl	8000634 <updateBufer>
			update7SegLed(index);
 8000dac:	4b7a      	ldr	r3, [pc, #488]	@ (8000f98 <fsm_manual+0x260>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fc97 	bl	80006e4 <update7SegLed>
			index++;
 8000db6:	4b78      	ldr	r3, [pc, #480]	@ (8000f98 <fsm_manual+0x260>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a76      	ldr	r2, [pc, #472]	@ (8000f98 <fsm_manual+0x260>)
 8000dbe:	6013      	str	r3, [r2, #0]
			if(index >= 4){
 8000dc0:	4b75      	ldr	r3, [pc, #468]	@ (8000f98 <fsm_manual+0x260>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	dd02      	ble.n	8000dce <fsm_manual+0x96>
				index = 0;
 8000dc8:	4b73      	ldr	r3, [pc, #460]	@ (8000f98 <fsm_manual+0x260>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(MODIFY_BUTTON)){   // nhan tha --> +1
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff f9bc 	bl	800014c <isButtonPressed>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d004      	beq.n	8000de4 <fsm_manual+0xac>
			temp_time++;
 8000dda:	4b6b      	ldr	r3, [pc, #428]	@ (8000f88 <fsm_manual+0x250>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a69      	ldr	r2, [pc, #420]	@ (8000f88 <fsm_manual+0x250>)
 8000de2:	6013      	str	r3, [r2, #0]
		if(isButtonLongPressed(MODIFY_BUTTON)){ // nhan de --> +5
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff f9cb 	bl	8000180 <isButtonLongPressed>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d004      	beq.n	8000dfa <fsm_manual+0xc2>
			temp_time += 5;
 8000df0:	4b65      	ldr	r3, [pc, #404]	@ (8000f88 <fsm_manual+0x250>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3305      	adds	r3, #5
 8000df6:	4a64      	ldr	r2, [pc, #400]	@ (8000f88 <fsm_manual+0x250>)
 8000df8:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(SET_BUTTON)){
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff f9a6 	bl	800014c <isButtonPressed>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d010      	beq.n	8000e28 <fsm_manual+0xf0>
			turnoff_red();
 8000e06:	f000 f955 	bl	80010b4 <turnoff_red>
			status = MODIFY_YELLOW;
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8000f7c <fsm_manual+0x244>)
 8000e0c:	220c      	movs	r2, #12
 8000e0e:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000e10:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 fa99 	bl	800134c <setTimer>
			timeRed = temp_time;
 8000e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8000f88 <fsm_manual+0x250>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a58      	ldr	r2, [pc, #352]	@ (8000f80 <fsm_manual+0x248>)
 8000e20:	6013      	str	r3, [r2, #0]
			temp_time = 1;
 8000e22:	4b59      	ldr	r3, [pc, #356]	@ (8000f88 <fsm_manual+0x250>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(MODE_BUTTON)){
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff f98f 	bl	800014c <isButtonPressed>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8121 	beq.w	8001078 <fsm_manual+0x340>
			turnoff_red();
 8000e36:	f000 f93d 	bl	80010b4 <turnoff_red>
			status = MODIFY_YELLOW;
 8000e3a:	4b50      	ldr	r3, [pc, #320]	@ (8000f7c <fsm_manual+0x244>)
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000e40:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e44:	2001      	movs	r0, #1
 8000e46:	f000 fa81 	bl	800134c <setTimer>
			temp_time = 1;
 8000e4a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f88 <fsm_manual+0x250>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
		break;
 8000e50:	e112      	b.n	8001078 <fsm_manual+0x340>
		temp_timeYellow = timeYellow;
 8000e52:	4b52      	ldr	r3, [pc, #328]	@ (8000f9c <fsm_manual+0x264>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a52      	ldr	r2, [pc, #328]	@ (8000fa0 <fsm_manual+0x268>)
 8000e58:	6013      	str	r3, [r2, #0]
		time13 = temp_time;
 8000e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f88 <fsm_manual+0x250>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a4b      	ldr	r2, [pc, #300]	@ (8000f8c <fsm_manual+0x254>)
 8000e60:	6013      	str	r3, [r2, #0]
		time24 = 3;
 8000e62:	4b4b      	ldr	r3, [pc, #300]	@ (8000f90 <fsm_manual+0x258>)
 8000e64:	2203      	movs	r2, #3
 8000e66:	601a      	str	r2, [r3, #0]
		if(isTimerFlagSet(1)==1){
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fa95 	bl	8001398 <isTimerFlagSet>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d10d      	bne.n	8000e90 <fsm_manual+0x158>
			HAL_GPIO_TogglePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin);
 8000e74:	2140      	movs	r1, #64	@ 0x40
 8000e76:	4847      	ldr	r0, [pc, #284]	@ (8000f94 <fsm_manual+0x25c>)
 8000e78:	f000 feb1 	bl	8001bde <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin);
 8000e7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e80:	4844      	ldr	r0, [pc, #272]	@ (8000f94 <fsm_manual+0x25c>)
 8000e82:	f000 feac 	bl	8001bde <HAL_GPIO_TogglePin>
			setTimer(1 , 500);
 8000e86:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f000 fa5e 	bl	800134c <setTimer>
		if(isTimerFlagSet(2)){
 8000e90:	2002      	movs	r0, #2
 8000e92:	f000 fa81 	bl	8001398 <isTimerFlagSet>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d016      	beq.n	8000eca <fsm_manual+0x192>
			setTimer(2 , 250);
 8000e9c:	21fa      	movs	r1, #250	@ 0xfa
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f000 fa54 	bl	800134c <setTimer>
			updateBufer();
 8000ea4:	f7ff fbc6 	bl	8000634 <updateBufer>
			update7SegLed(index);
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <fsm_manual+0x260>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc19 	bl	80006e4 <update7SegLed>
			index++;
 8000eb2:	4b39      	ldr	r3, [pc, #228]	@ (8000f98 <fsm_manual+0x260>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a37      	ldr	r2, [pc, #220]	@ (8000f98 <fsm_manual+0x260>)
 8000eba:	6013      	str	r3, [r2, #0]
			if(index >= 4){
 8000ebc:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <fsm_manual+0x260>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	dd02      	ble.n	8000eca <fsm_manual+0x192>
				index = 0;
 8000ec4:	4b34      	ldr	r3, [pc, #208]	@ (8000f98 <fsm_manual+0x260>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(MODIFY_BUTTON)){   // nhan tha --> +1
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff f93e 	bl	800014c <isButtonPressed>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <fsm_manual+0x1a8>
			temp_time++;
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f88 <fsm_manual+0x250>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a2a      	ldr	r2, [pc, #168]	@ (8000f88 <fsm_manual+0x250>)
 8000ede:	6013      	str	r3, [r2, #0]
		if(isButtonLongPressed(MODIFY_BUTTON)){ // nhan de --> +5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff f94d 	bl	8000180 <isButtonLongPressed>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d004      	beq.n	8000ef6 <fsm_manual+0x1be>
			temp_time += 5;
 8000eec:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <fsm_manual+0x250>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3305      	adds	r3, #5
 8000ef2:	4a25      	ldr	r2, [pc, #148]	@ (8000f88 <fsm_manual+0x250>)
 8000ef4:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(SET_BUTTON)){
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f7ff f928 	bl	800014c <isButtonPressed>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d013      	beq.n	8000f2a <fsm_manual+0x1f2>
			turnoff_yellow();
 8000f02:	f000 f8e9 	bl	80010d8 <turnoff_yellow>
			status = MODIFY_GREEN;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <fsm_manual+0x244>)
 8000f08:	220d      	movs	r2, #13
 8000f0a:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000f0c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f10:	2001      	movs	r0, #1
 8000f12:	f000 fa1b 	bl	800134c <setTimer>
			timeYellow = temp_time;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <fsm_manual+0x250>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a20      	ldr	r2, [pc, #128]	@ (8000f9c <fsm_manual+0x264>)
 8000f1c:	6013      	str	r3, [r2, #0]
			temp_time = 1;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <fsm_manual+0x250>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
			time13 = 1;
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <fsm_manual+0x254>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(MODE_BUTTON)==1){
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff f90e 	bl	800014c <isButtonPressed>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	f040 80a2 	bne.w	800107c <fsm_manual+0x344>
			turnoff_yellow();
 8000f38:	f000 f8ce 	bl	80010d8 <turnoff_yellow>
			status = MODIFY_GREEN;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <fsm_manual+0x244>)
 8000f3e:	220d      	movs	r2, #13
 8000f40:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000f42:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fa00 	bl	800134c <setTimer>
		break;
 8000f4c:	e096      	b.n	800107c <fsm_manual+0x344>
		if(timeRed > timeYellow){
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <fsm_manual+0x248>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <fsm_manual+0x264>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dd26      	ble.n	8000fa8 <fsm_manual+0x270>
			time13 = timeRed - timeYellow;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <fsm_manual+0x248>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <fsm_manual+0x264>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	4a09      	ldr	r2, [pc, #36]	@ (8000f8c <fsm_manual+0x254>)
 8000f66:	6013      	str	r3, [r2, #0]
			time24 = 4;
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <fsm_manual+0x258>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	601a      	str	r2, [r3, #0]
			timeGreen = time13;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <fsm_manual+0x254>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa4 <fsm_manual+0x26c>)
 8000f74:	6013      	str	r3, [r2, #0]
			updateBufer();
 8000f76:	f7ff fb5d 	bl	8000634 <updateBufer>
 8000f7a:	e025      	b.n	8000fc8 <fsm_manual+0x290>
 8000f7c:	200000ac 	.word	0x200000ac
 8000f80:	20000040 	.word	0x20000040
 8000f84:	200000a4 	.word	0x200000a4
 8000f88:	2000003c 	.word	0x2000003c
 8000f8c:	200000b0 	.word	0x200000b0
 8000f90:	200000b4 	.word	0x200000b4
 8000f94:	40010800 	.word	0x40010800
 8000f98:	200000a0 	.word	0x200000a0
 8000f9c:	20000048 	.word	0x20000048
 8000fa0:	200000a8 	.word	0x200000a8
 8000fa4:	20000044 	.word	0x20000044
			timeRed = temp_timeRed;
 8000fa8:	4b37      	ldr	r3, [pc, #220]	@ (8001088 <fsm_manual+0x350>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a37      	ldr	r2, [pc, #220]	@ (800108c <fsm_manual+0x354>)
 8000fae:	6013      	str	r3, [r2, #0]
			timeYellow = temp_timeYellow;
 8000fb0:	4b37      	ldr	r3, [pc, #220]	@ (8001090 <fsm_manual+0x358>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a37      	ldr	r2, [pc, #220]	@ (8001094 <fsm_manual+0x35c>)
 8000fb6:	6013      	str	r3, [r2, #0]
			time13 = 0;
 8000fb8:	4b37      	ldr	r3, [pc, #220]	@ (8001098 <fsm_manual+0x360>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
			time24 = 4;
 8000fbe:	4b37      	ldr	r3, [pc, #220]	@ (800109c <fsm_manual+0x364>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	601a      	str	r2, [r3, #0]
			updateBufer();
 8000fc4:	f7ff fb36 	bl	8000634 <updateBufer>
		if(isTimerFlagSet(1)==1){
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f000 f9e5 	bl	8001398 <isTimerFlagSet>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d10d      	bne.n	8000ff0 <fsm_manual+0x2b8>
			HAL_GPIO_TogglePin(GREEN_13_GPIO_Port , GREEN_13_Pin);
 8000fd4:	2180      	movs	r1, #128	@ 0x80
 8000fd6:	4832      	ldr	r0, [pc, #200]	@ (80010a0 <fsm_manual+0x368>)
 8000fd8:	f000 fe01 	bl	8001bde <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_24_GPIO_Port , GREEN_24_Pin);
 8000fdc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe0:	482f      	ldr	r0, [pc, #188]	@ (80010a0 <fsm_manual+0x368>)
 8000fe2:	f000 fdfc 	bl	8001bde <HAL_GPIO_TogglePin>
			setTimer(1 , 500);
 8000fe6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 f9ae 	bl	800134c <setTimer>
		if(isTimerFlagSet(2)){
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f000 f9d1 	bl	8001398 <isTimerFlagSet>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d016      	beq.n	800102a <fsm_manual+0x2f2>
			setTimer(2 , 250);
 8000ffc:	21fa      	movs	r1, #250	@ 0xfa
 8000ffe:	2002      	movs	r0, #2
 8001000:	f000 f9a4 	bl	800134c <setTimer>
			updateBufer();
 8001004:	f7ff fb16 	bl	8000634 <updateBufer>
			update7SegLed(index);
 8001008:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <fsm_manual+0x36c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fb69 	bl	80006e4 <update7SegLed>
			index++;
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <fsm_manual+0x36c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	4a22      	ldr	r2, [pc, #136]	@ (80010a4 <fsm_manual+0x36c>)
 800101a:	6013      	str	r3, [r2, #0]
			if(index >= 4){
 800101c:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <fsm_manual+0x36c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b03      	cmp	r3, #3
 8001022:	dd02      	ble.n	800102a <fsm_manual+0x2f2>
				index = 0;
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <fsm_manual+0x36c>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(SET_BUTTON)){
 800102a:	2002      	movs	r0, #2
 800102c:	f7ff f88e 	bl	800014c <isButtonPressed>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00f      	beq.n	8001056 <fsm_manual+0x31e>
			turnoff_green();
 8001036:	f000 f861 	bl	80010fc <turnoff_green>
			status = INIT;
 800103a:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <fsm_manual+0x370>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]
			temp_time = 1;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <fsm_manual+0x374>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
			time13 = timeRed;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <fsm_manual+0x354>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a13      	ldr	r2, [pc, #76]	@ (8001098 <fsm_manual+0x360>)
 800104c:	6013      	str	r3, [r2, #0]
			time24 = timeGreen;
 800104e:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <fsm_manual+0x378>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <fsm_manual+0x364>)
 8001054:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(MODE_BUTTON)==1){
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff f878 	bl	800014c <isButtonPressed>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10e      	bne.n	8001080 <fsm_manual+0x348>
			turnoff_green();
 8001062:	f000 f84b 	bl	80010fc <turnoff_green>
			temp_time = 1;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <fsm_manual+0x374>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
			status = INIT;
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <fsm_manual+0x370>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]
		break;
 8001072:	e005      	b.n	8001080 <fsm_manual+0x348>
		break;
 8001074:	bf00      	nop
 8001076:	e004      	b.n	8001082 <fsm_manual+0x34a>
		break;
 8001078:	bf00      	nop
 800107a:	e002      	b.n	8001082 <fsm_manual+0x34a>
		break;
 800107c:	bf00      	nop
 800107e:	e000      	b.n	8001082 <fsm_manual+0x34a>
		break;
 8001080:	bf00      	nop
	}
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000a4 	.word	0x200000a4
 800108c:	20000040 	.word	0x20000040
 8001090:	200000a8 	.word	0x200000a8
 8001094:	20000048 	.word	0x20000048
 8001098:	200000b0 	.word	0x200000b0
 800109c:	200000b4 	.word	0x200000b4
 80010a0:	40010800 	.word	0x40010800
 80010a4:	200000a0 	.word	0x200000a0
 80010a8:	200000ac 	.word	0x200000ac
 80010ac:	2000003c 	.word	0x2000003c
 80010b0:	20000044 	.word	0x20000044

080010b4 <turnoff_red>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void turnoff_red(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2120      	movs	r1, #32
 80010bc:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <turnoff_red+0x20>)
 80010be:	f000 fd76 	bl	8001bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_24_GPIO_Port , RED_24_Pin , GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <turnoff_red+0x20>)
 80010ca:	f000 fd70 	bl	8001bae <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40010800 	.word	0x40010800

080010d8 <turnoff_yellow>:
void turnoff_yellow(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2140      	movs	r1, #64	@ 0x40
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <turnoff_yellow+0x20>)
 80010e2:	f000 fd64 	bl	8001bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin , GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <turnoff_yellow+0x20>)
 80010ee:	f000 fd5e 	bl	8001bae <HAL_GPIO_WritePin>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010800 	.word	0x40010800

080010fc <turnoff_green>:
void turnoff_green(){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <turnoff_green+0x20>)
 8001106:	f000 fd52 	bl	8001bae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_24_GPIO_Port , GREEN_24_Pin , GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <turnoff_green+0x20>)
 8001112:	f000 fd4c 	bl	8001bae <HAL_GPIO_WritePin>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40010800 	.word	0x40010800

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f000 fa40 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 f814 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f000 f89a 	bl	8001264 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001130:	f000 f84c 	bl	80011cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001134:	4805      	ldr	r0, [pc, #20]	@ (800114c <main+0x2c>)
 8001136:	f001 f999 	bl	800246c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = 1;
 800113a:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <main+0x30>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  while (1)
  {
		 fsm_automatic();
 8001140:	f7ff fb94 	bl	800086c <fsm_automatic>
		 fsm_manual();
 8001144:	f7ff fdf8 	bl	8000d38 <fsm_manual>
  {
 8001148:	bf00      	nop
 800114a:	e7f9      	b.n	8001140 <main+0x20>
 800114c:	200000b8 	.word	0x200000b8
 8001150:	200000ac 	.word	0x200000ac

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b090      	sub	sp, #64	@ 0x40
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	2228      	movs	r2, #40	@ 0x28
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fd0e 	bl	8002b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117a:	2301      	movs	r3, #1
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117e:	2310      	movs	r3, #16
 8001180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd40 	bl	8001c10 <HAL_RCC_OscConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001196:	f000 f8d3 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119a:	230f      	movs	r3, #15
 800119c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 ffae 	bl	8002114 <HAL_RCC_ClockConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011be:	f000 f8bf 	bl	8001340 <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	3740      	adds	r7, #64	@ 0x40
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <MX_TIM2_Init+0x94>)
 80011ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <MX_TIM2_Init+0x94>)
 80011f2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80011f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <MX_TIM2_Init+0x94>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <MX_TIM2_Init+0x94>)
 8001200:	2209      	movs	r2, #9
 8001202:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <MX_TIM2_Init+0x94>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_TIM2_Init+0x94>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001210:	4813      	ldr	r0, [pc, #76]	@ (8001260 <MX_TIM2_Init+0x94>)
 8001212:	f001 f8db 	bl	80023cc <HAL_TIM_Base_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800121c:	f000 f890 	bl	8001340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001224:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	@ (8001260 <MX_TIM2_Init+0x94>)
 800122e:	f001 fa59 	bl	80026e4 <HAL_TIM_ConfigClockSource>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001238:	f000 f882 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_TIM2_Init+0x94>)
 800124a:	f001 fc31 	bl	8002ab0 <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001254:	f000 f874 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200000b8 	.word	0x200000b8

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b28      	ldr	r3, [pc, #160]	@ (800131c <MX_GPIO_Init+0xb8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a27      	ldr	r2, [pc, #156]	@ (800131c <MX_GPIO_Init+0xb8>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b25      	ldr	r3, [pc, #148]	@ (800131c <MX_GPIO_Init+0xb8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <MX_GPIO_Init+0xb8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a21      	ldr	r2, [pc, #132]	@ (800131c <MX_GPIO_Init+0xb8>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <MX_GPIO_Init+0xb8>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_13_Pin|YELLOW_13_Pin|GREEN_13_Pin|RED_24_Pin
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80012ae:	481c      	ldr	r0, [pc, #112]	@ (8001320 <MX_GPIO_Init+0xbc>)
 80012b0:	f000 fc7d 	bl	8001bae <HAL_GPIO_WritePin>
                          |YELLOW_24_Pin|GREEN_24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|en4_Pin
 80012b4:	2200      	movs	r2, #0
 80012b6:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80012ba:	481a      	ldr	r0, [pc, #104]	@ (8001324 <MX_GPIO_Init+0xc0>)
 80012bc:	f000 fc77 	bl	8001bae <HAL_GPIO_WritePin>
                          |d_Pin|e_Pin|f_Pin|g_Pin
                          |en1_Pin|en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MODE_BUTTON_Pin MODIFY_BUTTON_Pin SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MODE_BUTTON_Pin|MODIFY_BUTTON_Pin|SET_BUTTON_Pin;
 80012c0:	231c      	movs	r3, #28
 80012c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4619      	mov	r1, r3
 80012d2:	4813      	ldr	r0, [pc, #76]	@ (8001320 <MX_GPIO_Init+0xbc>)
 80012d4:	f000 fad8 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_13_Pin YELLOW_13_Pin GREEN_13_Pin RED_24_Pin
                           YELLOW_24_Pin GREEN_24_Pin */
  GPIO_InitStruct.Pin = RED_13_Pin|YELLOW_13_Pin|GREEN_13_Pin|RED_24_Pin
 80012d8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012dc:	60bb      	str	r3, [r7, #8]
                          |YELLOW_24_Pin|GREEN_24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2302      	movs	r3, #2
 80012e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	480b      	ldr	r0, [pc, #44]	@ (8001320 <MX_GPIO_Init+0xbc>)
 80012f2:	f000 fac9 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin en4_Pin
                           d_Pin e_Pin f_Pin g_Pin
                           en1_Pin en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|en4_Pin
 80012f6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80012fa:	60bb      	str	r3, [r7, #8]
                          |d_Pin|e_Pin|f_Pin|g_Pin
                          |en1_Pin|en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2302      	movs	r3, #2
 8001306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4619      	mov	r1, r3
 800130e:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_GPIO_Init+0xc0>)
 8001310:	f000 faba 	bl	8001888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	40010800 	.word	0x40010800
 8001324:	40010c00 	.word	0x40010c00

08001328 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001330:	f000 f852 	bl	80013d8 <timerRun>
	getKeyInput();
 8001334:	f7fe ff3e 	bl	80001b4 <getKeyInput>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <Error_Handler+0x8>

0800134c <setTimer>:

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};


void setTimer(int index, int duration) {
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	if (index >= 0 && index < NUM_OF_TIMERS) {
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db12      	blt.n	8001382 <setTimer+0x36>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b04      	cmp	r3, #4
 8001360:	dc0f      	bgt.n	8001382 <setTimer+0x36>
		timer_counter[index] = duration / TIMER_CYCLE;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	4a09      	ldr	r2, [pc, #36]	@ (800138c <setTimer+0x40>)
 8001366:	fb82 1203 	smull	r1, r2, r2, r3
 800136a:	1092      	asrs	r2, r2, #2
 800136c:	17db      	asrs	r3, r3, #31
 800136e:	1ad2      	subs	r2, r2, r3
 8001370:	4907      	ldr	r1, [pc, #28]	@ (8001390 <setTimer+0x44>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer_flag[index] = 0;
 8001378:	4a06      	ldr	r2, [pc, #24]	@ (8001394 <setTimer+0x48>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2100      	movs	r1, #0
 800137e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	66666667 	.word	0x66666667
 8001390:	20000100 	.word	0x20000100
 8001394:	20000114 	.word	0x20000114

08001398 <isTimerFlagSet>:


int isTimerFlagSet(int index){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (index >= 0 && index < NUM_OF_TIMERS) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0f      	blt.n	80013c6 <isTimerFlagSet+0x2e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	dc0c      	bgt.n	80013c6 <isTimerFlagSet+0x2e>
		if (timer_flag[index] == 1) {
 80013ac:	4a09      	ldr	r2, [pc, #36]	@ (80013d4 <isTimerFlagSet+0x3c>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d106      	bne.n	80013c6 <isTimerFlagSet+0x2e>
			timer_flag[index] = 0;
 80013b8:	4a06      	ldr	r2, [pc, #24]	@ (80013d4 <isTimerFlagSet+0x3c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2100      	movs	r1, #0
 80013be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <isTimerFlagSet+0x30>
		}
	}
	return 0;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000114 	.word	0x20000114

080013d8 <timerRun>:


void timerRun() {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	e01c      	b.n	800141e <timerRun+0x46>
		if (timer_counter[i] > 0) {
 80013e4:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <timerRun+0x58>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dd13      	ble.n	8001418 <timerRun+0x40>
			timer_counter[i]--;
 80013f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001430 <timerRun+0x58>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	1e5a      	subs	r2, r3, #1
 80013fa:	490d      	ldr	r1, [pc, #52]	@ (8001430 <timerRun+0x58>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8001402:	4a0b      	ldr	r2, [pc, #44]	@ (8001430 <timerRun+0x58>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	2b00      	cmp	r3, #0
 800140c:	dc04      	bgt.n	8001418 <timerRun+0x40>
				timer_flag[i] = 1;
 800140e:	4a09      	ldr	r2, [pc, #36]	@ (8001434 <timerRun+0x5c>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2101      	movs	r1, #1
 8001414:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3301      	adds	r3, #1
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b04      	cmp	r3, #4
 8001422:	dddf      	ble.n	80013e4 <timerRun+0xc>
			}
		}
	}
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000100 	.word	0x20000100
 8001434:	20000114 	.word	0x20000114

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_MspInit+0x5c>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a14      	ldr	r2, [pc, #80]	@ (8001494 <HAL_MspInit+0x5c>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_MspInit+0x5c>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <HAL_MspInit+0x5c>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a0e      	ldr	r2, [pc, #56]	@ (8001494 <HAL_MspInit+0x5c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <HAL_MspInit+0x5c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_MspInit+0x60>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <HAL_MspInit+0x60>)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000
 8001498:	40010000 	.word	0x40010000

0800149c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ac:	d113      	bne.n	80014d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <HAL_TIM_Base_MspInit+0x44>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <HAL_TIM_Base_MspInit+0x44>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <HAL_TIM_Base_MspInit+0x44>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	201c      	movs	r0, #28
 80014cc:	f000 f9a5 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d0:	201c      	movs	r0, #28
 80014d2:	f000 f9be 	bl	8001852 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <NMI_Handler+0x4>

080014ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <MemManage_Handler+0x4>

080014fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <UsageFault_Handler+0x4>

0800150c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001534:	f000 f87e 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <TIM2_IRQHandler+0x10>)
 8001542:	f000 ffdf 	bl	8002504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200000b8 	.word	0x200000b8

08001550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800155c:	f7ff fff8 	bl	8001550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001560:	480b      	ldr	r0, [pc, #44]	@ (8001590 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001562:	490c      	ldr	r1, [pc, #48]	@ (8001594 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001564:	4a0c      	ldr	r2, [pc, #48]	@ (8001598 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a09      	ldr	r2, [pc, #36]	@ (800159c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001578:	4c09      	ldr	r4, [pc, #36]	@ (80015a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001586:	f001 fb05 	bl	8002b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158a:	f7ff fdc9 	bl	8001120 <main>
  bx lr
 800158e:	4770      	bx	lr
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001598:	08002c20 	.word	0x08002c20
  ldr r2, =_sbss
 800159c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80015a0:	2000012c 	.word	0x2000012c

080015a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC1_2_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_Init+0x28>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <HAL_Init+0x28>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f923 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff ff38 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f93b 	bl	800186e <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f000 f903 	bl	800181a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000004c 	.word	0x2000004c
 800162c:	20000054 	.word	0x20000054
 8001630:	20000050 	.word	0x20000050

08001634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <HAL_IncTick+0x1c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_IncTick+0x20>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a03      	ldr	r2, [pc, #12]	@ (8001654 <HAL_IncTick+0x20>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	20000054 	.word	0x20000054
 8001654:	20000128 	.word	0x20000128

08001658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b02      	ldr	r3, [pc, #8]	@ (8001668 <HAL_GetTick+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000128 	.word	0x20000128

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	@ (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4906      	ldr	r1, [pc, #24]	@ (8001704 <__NVIC_EnableIRQ+0x34>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	@ (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	@ (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	@ 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff90 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff2d 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff42 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff90 	bl	800175c <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5f 	bl	8001708 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff35 	bl	80016d0 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b08b      	sub	sp, #44	@ 0x2c
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e161      	b.n	8001b60 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800189c:	2201      	movs	r2, #1
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8150 	bne.w	8001b5a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4a97      	ldr	r2, [pc, #604]	@ (8001b1c <HAL_GPIO_Init+0x294>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d05e      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018c4:	4a95      	ldr	r2, [pc, #596]	@ (8001b1c <HAL_GPIO_Init+0x294>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d875      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ca:	4a95      	ldr	r2, [pc, #596]	@ (8001b20 <HAL_GPIO_Init+0x298>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d058      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018d0:	4a93      	ldr	r2, [pc, #588]	@ (8001b20 <HAL_GPIO_Init+0x298>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d86f      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018d6:	4a93      	ldr	r2, [pc, #588]	@ (8001b24 <HAL_GPIO_Init+0x29c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d052      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018dc:	4a91      	ldr	r2, [pc, #580]	@ (8001b24 <HAL_GPIO_Init+0x29c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d869      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018e2:	4a91      	ldr	r2, [pc, #580]	@ (8001b28 <HAL_GPIO_Init+0x2a0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04c      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018e8:	4a8f      	ldr	r2, [pc, #572]	@ (8001b28 <HAL_GPIO_Init+0x2a0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d863      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ee:	4a8f      	ldr	r2, [pc, #572]	@ (8001b2c <HAL_GPIO_Init+0x2a4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d046      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018f4:	4a8d      	ldr	r2, [pc, #564]	@ (8001b2c <HAL_GPIO_Init+0x2a4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d85d      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d82a      	bhi.n	8001954 <HAL_GPIO_Init+0xcc>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d859      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 8001902:	a201      	add	r2, pc, #4	@ (adr r2, 8001908 <HAL_GPIO_Init+0x80>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001983 	.word	0x08001983
 800190c:	0800195d 	.word	0x0800195d
 8001910:	0800196f 	.word	0x0800196f
 8001914:	080019b1 	.word	0x080019b1
 8001918:	080019b7 	.word	0x080019b7
 800191c:	080019b7 	.word	0x080019b7
 8001920:	080019b7 	.word	0x080019b7
 8001924:	080019b7 	.word	0x080019b7
 8001928:	080019b7 	.word	0x080019b7
 800192c:	080019b7 	.word	0x080019b7
 8001930:	080019b7 	.word	0x080019b7
 8001934:	080019b7 	.word	0x080019b7
 8001938:	080019b7 	.word	0x080019b7
 800193c:	080019b7 	.word	0x080019b7
 8001940:	080019b7 	.word	0x080019b7
 8001944:	080019b7 	.word	0x080019b7
 8001948:	080019b7 	.word	0x080019b7
 800194c:	08001965 	.word	0x08001965
 8001950:	08001979 	.word	0x08001979
 8001954:	4a76      	ldr	r2, [pc, #472]	@ (8001b30 <HAL_GPIO_Init+0x2a8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195a:	e02c      	b.n	80019b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e029      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	3304      	adds	r3, #4
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e024      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	3308      	adds	r3, #8
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e01f      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	330c      	adds	r3, #12
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e01a      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198a:	2304      	movs	r3, #4
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e013      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001998:	2308      	movs	r3, #8
 800199a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	611a      	str	r2, [r3, #16]
          break;
 80019a2:	e009      	b.n	80019b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	615a      	str	r2, [r3, #20]
          break;
 80019ae:	e003      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          break;
 80019b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2bff      	cmp	r3, #255	@ 0xff
 80019bc:	d801      	bhi.n	80019c2 <HAL_GPIO_Init+0x13a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	e001      	b.n	80019c6 <HAL_GPIO_Init+0x13e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3304      	adds	r3, #4
 80019c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2bff      	cmp	r3, #255	@ 0xff
 80019cc:	d802      	bhi.n	80019d4 <HAL_GPIO_Init+0x14c>
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	e002      	b.n	80019da <HAL_GPIO_Init+0x152>
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	3b08      	subs	r3, #8
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	210f      	movs	r1, #15
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	431a      	orrs	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80a9 	beq.w	8001b5a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a08:	4b4a      	ldr	r3, [pc, #296]	@ (8001b34 <HAL_GPIO_Init+0x2ac>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a49      	ldr	r2, [pc, #292]	@ (8001b34 <HAL_GPIO_Init+0x2ac>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b47      	ldr	r3, [pc, #284]	@ (8001b34 <HAL_GPIO_Init+0x2ac>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a20:	4a45      	ldr	r2, [pc, #276]	@ (8001b38 <HAL_GPIO_Init+0x2b0>)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3d      	ldr	r2, [pc, #244]	@ (8001b3c <HAL_GPIO_Init+0x2b4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1e0>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1dc>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3b      	ldr	r2, [pc, #236]	@ (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1d8>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e004      	b.n	8001a6a <HAL_GPIO_Init+0x1e2>
 8001a60:	2303      	movs	r3, #3
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_Init+0x1e2>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_GPIO_Init+0x1e2>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a6c:	f002 0203 	and.w	r2, r2, #3
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4093      	lsls	r3, r2
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7a:	492f      	ldr	r1, [pc, #188]	@ (8001b38 <HAL_GPIO_Init+0x2b0>)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a94:	4b2c      	ldr	r3, [pc, #176]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	492b      	ldr	r1, [pc, #172]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aa2:	4b29      	ldr	r3, [pc, #164]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4927      	ldr	r1, [pc, #156]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001abc:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	4921      	ldr	r1, [pc, #132]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aca:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	491d      	ldr	r1, [pc, #116]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4917      	ldr	r1, [pc, #92]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4913      	ldr	r1, [pc, #76]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01f      	beq.n	8001b4c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e01f      	b.n	8001b5a <HAL_GPIO_Init+0x2d2>
 8001b1a:	bf00      	nop
 8001b1c:	10320000 	.word	0x10320000
 8001b20:	10310000 	.word	0x10310000
 8001b24:	10220000 	.word	0x10220000
 8001b28:	10210000 	.word	0x10210000
 8001b2c:	10120000 	.word	0x10120000
 8001b30:	10110000 	.word	0x10110000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40010800 	.word	0x40010800
 8001b40:	40010c00 	.word	0x40010c00
 8001b44:	40011000 	.word	0x40011000
 8001b48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_GPIO_Init+0x2f4>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	4909      	ldr	r1, [pc, #36]	@ (8001b7c <HAL_GPIO_Init+0x2f4>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f47f ae96 	bne.w	800189c <HAL_GPIO_Init+0x14>
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	372c      	adds	r7, #44	@ 0x2c
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40010400 	.word	0x40010400

08001b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e001      	b.n	8001ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	807b      	strh	r3, [r7, #2]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbe:	787b      	ldrb	r3, [r7, #1]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc4:	887a      	ldrh	r2, [r7, #2]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bca:	e003      	b.n	8001bd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	041a      	lsls	r2, r3, #16
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	611a      	str	r2, [r3, #16]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf0:	887a      	ldrh	r2, [r7, #2]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	041a      	lsls	r2, r3, #16
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	400b      	ands	r3, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e272      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8087 	beq.w	8001d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c30:	4b92      	ldr	r3, [pc, #584]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d00c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c3c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d112      	bne.n	8001c6e <HAL_RCC_OscConfig+0x5e>
 8001c48:	4b8c      	ldr	r3, [pc, #560]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c54:	d10b      	bne.n	8001c6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c56:	4b89      	ldr	r3, [pc, #548]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d06c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x12c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d168      	bne.n	8001d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e24c      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x76>
 8001c78:	4b80      	ldr	r3, [pc, #512]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e02e      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x98>
 8001c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7a      	ldr	r2, [pc, #488]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b78      	ldr	r3, [pc, #480]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a77      	ldr	r2, [pc, #476]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e01d      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0xbc>
 8001cb2:	4b72      	ldr	r3, [pc, #456]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a71      	ldr	r2, [pc, #452]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b6f      	ldr	r3, [pc, #444]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001ccc:	4b6b      	ldr	r3, [pc, #428]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6a      	ldr	r2, [pc, #424]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b68      	ldr	r3, [pc, #416]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a67      	ldr	r2, [pc, #412]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fcb4 	bl	8001658 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fcb0 	bl	8001658 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	@ 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e200      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b5d      	ldr	r3, [pc, #372]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xe4>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fca0 	bl	8001658 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fc9c 	bl	8001658 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	@ 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1ec      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	4b53      	ldr	r3, [pc, #332]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x10c>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d063      	beq.n	8001e12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d56:	4b49      	ldr	r3, [pc, #292]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x18c>
 8001d62:	4b46      	ldr	r3, [pc, #280]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d116      	bne.n	8001d9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	4b43      	ldr	r3, [pc, #268]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x176>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e1c0      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b3d      	ldr	r3, [pc, #244]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4939      	ldr	r1, [pc, #228]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	e03a      	b.n	8001e12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da4:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fc55 	bl	8001658 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db2:	f7ff fc51 	bl	8001658 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e1a1      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4927      	ldr	r1, [pc, #156]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
 8001de4:	e015      	b.n	8001e12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de6:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fc34 	bl	8001658 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df4:	f7ff fc30 	bl	8001658 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e180      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03a      	beq.n	8001e94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d019      	beq.n	8001e5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff fc14 	bl	8001658 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e34:	f7ff fc10 	bl	8001658 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e160      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f000 fa9c 	bl	8002390 <RCC_Delay>
 8001e58:	e01c      	b.n	8001e94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7ff fbfa 	bl	8001658 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fbf6 	bl	8001658 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d908      	bls.n	8001e88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e146      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	42420000 	.word	0x42420000
 8001e84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	4b92      	ldr	r3, [pc, #584]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e9      	bne.n	8001e68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a6 	beq.w	8001fee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b8b      	ldr	r3, [pc, #556]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10d      	bne.n	8001ece <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b88      	ldr	r3, [pc, #544]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a87      	ldr	r2, [pc, #540]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b85      	ldr	r3, [pc, #532]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	4b82      	ldr	r3, [pc, #520]	@ (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d118      	bne.n	8001f0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eda:	4b7f      	ldr	r3, [pc, #508]	@ (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7e      	ldr	r2, [pc, #504]	@ (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee6:	f7ff fbb7 	bl	8001658 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eee:	f7ff fbb3 	bl	8001658 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b64      	cmp	r3, #100	@ 0x64
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e103      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b75      	ldr	r3, [pc, #468]	@ (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x312>
 8001f14:	4b6f      	ldr	r3, [pc, #444]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a6e      	ldr	r2, [pc, #440]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e02d      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x334>
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a69      	ldr	r2, [pc, #420]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b67      	ldr	r3, [pc, #412]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a66      	ldr	r2, [pc, #408]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	e01c      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x356>
 8001f4c:	4b61      	ldr	r3, [pc, #388]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a60      	ldr	r2, [pc, #384]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	4b5e      	ldr	r3, [pc, #376]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f66:	4b5b      	ldr	r3, [pc, #364]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a5a      	ldr	r2, [pc, #360]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	4b58      	ldr	r3, [pc, #352]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a57      	ldr	r2, [pc, #348]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d015      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fb67 	bl	8001658 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff fb63 	bl	8001658 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0b1      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ee      	beq.n	8001f8e <HAL_RCC_OscConfig+0x37e>
 8001fb0:	e014      	b.n	8001fdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fb51 	bl	8001658 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff fb4d 	bl	8001658 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e09b      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	4b40      	ldr	r3, [pc, #256]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a3b      	ldr	r2, [pc, #236]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8087 	beq.w	8002106 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff8:	4b36      	ldr	r3, [pc, #216]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d061      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d146      	bne.n	800209a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b33      	ldr	r3, [pc, #204]	@ (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff fb21 	bl	8001658 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff fb1d 	bl	8001658 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e06d      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202c:	4b29      	ldr	r3, [pc, #164]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002040:	d108      	bne.n	8002054 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002042:	4b24      	ldr	r3, [pc, #144]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4921      	ldr	r1, [pc, #132]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002054:	4b1f      	ldr	r3, [pc, #124]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a19      	ldr	r1, [r3, #32]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	430b      	orrs	r3, r1
 8002066:	491b      	ldr	r1, [pc, #108]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7ff faf1 	bl	8001658 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff faed 	bl	8001658 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e03d      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800208c:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x46a>
 8002098:	e035      	b.n	8002106 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff fada 	bl	8001658 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff fad6 	bl	8001658 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e026      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x498>
 80020c6:	e01e      	b.n	8002106 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e019      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
 80020dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_RCC_OscConfig+0x500>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0d0      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b6a      	ldr	r3, [pc, #424]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d910      	bls.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b67      	ldr	r3, [pc, #412]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4965      	ldr	r1, [pc, #404]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b63      	ldr	r3, [pc, #396]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0b8      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002170:	4b59      	ldr	r3, [pc, #356]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a58      	ldr	r2, [pc, #352]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800217a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002188:	4b53      	ldr	r3, [pc, #332]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a52      	ldr	r2, [pc, #328]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002194:	4b50      	ldr	r3, [pc, #320]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	494d      	ldr	r1, [pc, #308]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d040      	beq.n	8002234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b47      	ldr	r3, [pc, #284]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d115      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e07f      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b41      	ldr	r3, [pc, #260]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e073      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b3d      	ldr	r3, [pc, #244]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e06b      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b39      	ldr	r3, [pc, #228]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4936      	ldr	r1, [pc, #216]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002204:	f7ff fa28 	bl	8001658 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7ff fa24 	bl	8001658 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e053      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2d      	ldr	r3, [pc, #180]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b27      	ldr	r3, [pc, #156]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d210      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b24      	ldr	r3, [pc, #144]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4922      	ldr	r1, [pc, #136]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e032      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4916      	ldr	r1, [pc, #88]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800228e:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	490e      	ldr	r1, [pc, #56]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022a2:	f000 f821 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	490a      	ldr	r1, [pc, #40]	@ (80022dc <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	5ccb      	ldrb	r3, [r1, r3]
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	4a09      	ldr	r2, [pc, #36]	@ (80022e0 <HAL_RCC_ClockConfig+0x1cc>)
 80022bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022be:	4b09      	ldr	r3, [pc, #36]	@ (80022e4 <HAL_RCC_ClockConfig+0x1d0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff f986 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08002bf4 	.word	0x08002bf4
 80022e0:	2000004c 	.word	0x2000004c
 80022e4:	20000050 	.word	0x20000050

080022e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002302:	4b1e      	ldr	r3, [pc, #120]	@ (800237c <HAL_RCC_GetSysClockFreq+0x94>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x30>
 8002312:	2b08      	cmp	r3, #8
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x36>
 8002316:	e027      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002318:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x98>)
 800231a:	613b      	str	r3, [r7, #16]
      break;
 800231c:	e027      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	0c9b      	lsrs	r3, r3, #18
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	4a17      	ldr	r2, [pc, #92]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002328:	5cd3      	ldrb	r3, [r2, r3]
 800232a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d010      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002336:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_RCC_GetSysClockFreq+0x94>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0c5b      	lsrs	r3, r3, #17
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	4a11      	ldr	r2, [pc, #68]	@ (8002388 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0d      	ldr	r2, [pc, #52]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x98>)
 800234a:	fb03 f202 	mul.w	r2, r3, r2
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e004      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0c      	ldr	r2, [pc, #48]	@ (800238c <HAL_RCC_GetSysClockFreq+0xa4>)
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	613b      	str	r3, [r7, #16]
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x98>)
 800236a:	613b      	str	r3, [r7, #16]
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	693b      	ldr	r3, [r7, #16]
}
 8002370:	4618      	mov	r0, r3
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	007a1200 	.word	0x007a1200
 8002384:	08002c04 	.word	0x08002c04
 8002388:	08002c14 	.word	0x08002c14
 800238c:	003d0900 	.word	0x003d0900

08002390 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002398:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <RCC_Delay+0x34>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <RCC_Delay+0x38>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0a5b      	lsrs	r3, r3, #9
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023ac:	bf00      	nop
  }
  while (Delay --);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	60fa      	str	r2, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f9      	bne.n	80023ac <RCC_Delay+0x1c>
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	2000004c 	.word	0x2000004c
 80023c8:	10624dd3 	.word	0x10624dd3

080023cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e041      	b.n	8002462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff f852 	bl	800149c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f000 fa56 	bl	80028bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d001      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e035      	b.n	80024f0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a16      	ldr	r2, [pc, #88]	@ (80024fc <HAL_TIM_Base_Start_IT+0x90>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_TIM_Base_Start_IT+0x4e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ae:	d004      	beq.n	80024ba <HAL_TIM_Base_Start_IT+0x4e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a12      	ldr	r2, [pc, #72]	@ (8002500 <HAL_TIM_Base_Start_IT+0x94>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d111      	bne.n	80024de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b06      	cmp	r3, #6
 80024ca:	d010      	beq.n	80024ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024dc:	e007      	b.n	80024ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40000400 	.word	0x40000400

08002504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d020      	beq.n	8002568 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0202 	mvn.w	r2, #2
 8002538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f998 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 8002554:	e005      	b.n	8002562 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f98b 	bl	8002872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f99a 	bl	8002896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d020      	beq.n	80025b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01b      	beq.n	80025b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0204 	mvn.w	r2, #4
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f972 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f965 	bl	8002872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f974 	bl	8002896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d020      	beq.n	8002600 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01b      	beq.n	8002600 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0208 	mvn.w	r2, #8
 80025d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2204      	movs	r2, #4
 80025d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f94c 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f93f 	bl	8002872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f94e 	bl	8002896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d020      	beq.n	800264c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01b      	beq.n	800264c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0210 	mvn.w	r2, #16
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2208      	movs	r2, #8
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f926 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f919 	bl	8002872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f928 	bl	8002896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00c      	beq.n	8002670 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0201 	mvn.w	r2, #1
 8002668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe fe5c 	bl	8001328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00c      	beq.n	8002694 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800268c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa6f 	bl	8002b72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8f8 	bl	80028a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0220 	mvn.w	r2, #32
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fa42 	bl	8002b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_TIM_ConfigClockSource+0x1c>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e0b4      	b.n	800286a <HAL_TIM_ConfigClockSource+0x186>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800271e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002738:	d03e      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0xd4>
 800273a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800273e:	f200 8087 	bhi.w	8002850 <HAL_TIM_ConfigClockSource+0x16c>
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002746:	f000 8086 	beq.w	8002856 <HAL_TIM_ConfigClockSource+0x172>
 800274a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800274e:	d87f      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b70      	cmp	r3, #112	@ 0x70
 8002752:	d01a      	beq.n	800278a <HAL_TIM_ConfigClockSource+0xa6>
 8002754:	2b70      	cmp	r3, #112	@ 0x70
 8002756:	d87b      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b60      	cmp	r3, #96	@ 0x60
 800275a:	d050      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x11a>
 800275c:	2b60      	cmp	r3, #96	@ 0x60
 800275e:	d877      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b50      	cmp	r3, #80	@ 0x50
 8002762:	d03c      	beq.n	80027de <HAL_TIM_ConfigClockSource+0xfa>
 8002764:	2b50      	cmp	r3, #80	@ 0x50
 8002766:	d873      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b40      	cmp	r3, #64	@ 0x40
 800276a:	d058      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x13a>
 800276c:	2b40      	cmp	r3, #64	@ 0x40
 800276e:	d86f      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b30      	cmp	r3, #48	@ 0x30
 8002772:	d064      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x15a>
 8002774:	2b30      	cmp	r3, #48	@ 0x30
 8002776:	d86b      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b20      	cmp	r3, #32
 800277a:	d060      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x15a>
 800277c:	2b20      	cmp	r3, #32
 800277e:	d867      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x16c>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d05c      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x15a>
 8002784:	2b10      	cmp	r3, #16
 8002786:	d05a      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x15a>
 8002788:	e062      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800279a:	f000 f96a 	bl	8002a72 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	609a      	str	r2, [r3, #8]
      break;
 80027b6:	e04f      	b.n	8002858 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027c8:	f000 f953 	bl	8002a72 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027da:	609a      	str	r2, [r3, #8]
      break;
 80027dc:	e03c      	b.n	8002858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ea:	461a      	mov	r2, r3
 80027ec:	f000 f8ca 	bl	8002984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2150      	movs	r1, #80	@ 0x50
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f921 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 80027fc:	e02c      	b.n	8002858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800280a:	461a      	mov	r2, r3
 800280c:	f000 f8e8 	bl	80029e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2160      	movs	r1, #96	@ 0x60
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f911 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 800281c:	e01c      	b.n	8002858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800282a:	461a      	mov	r2, r3
 800282c:	f000 f8aa 	bl	8002984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2140      	movs	r1, #64	@ 0x40
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f901 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 800283c:	e00c      	b.n	8002858 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f000 f8f8 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 800284e:	e003      	b.n	8002858 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      break;
 8002854:	e000      	b.n	8002858 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
	...

080028bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a2b      	ldr	r2, [pc, #172]	@ (800297c <TIM_Base_SetConfig+0xc0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d007      	beq.n	80028e4 <TIM_Base_SetConfig+0x28>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028da:	d003      	beq.n	80028e4 <TIM_Base_SetConfig+0x28>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a28      	ldr	r2, [pc, #160]	@ (8002980 <TIM_Base_SetConfig+0xc4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d108      	bne.n	80028f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a20      	ldr	r2, [pc, #128]	@ (800297c <TIM_Base_SetConfig+0xc0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <TIM_Base_SetConfig+0x52>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002904:	d003      	beq.n	800290e <TIM_Base_SetConfig+0x52>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1d      	ldr	r2, [pc, #116]	@ (8002980 <TIM_Base_SetConfig+0xc4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d108      	bne.n	8002920 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0d      	ldr	r2, [pc, #52]	@ (800297c <TIM_Base_SetConfig+0xc0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d103      	bne.n	8002954 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f023 0201 	bic.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	611a      	str	r2, [r3, #16]
  }
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400

08002984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f023 0201 	bic.w	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f023 030a 	bic.w	r3, r3, #10
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	621a      	str	r2, [r3, #32]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0210 	bic.w	r2, r3, #16
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	031b      	lsls	r3, r3, #12
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	621a      	str	r2, [r3, #32]
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f043 0307 	orr.w	r3, r3, #7
 8002a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b087      	sub	sp, #28
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	021a      	lsls	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	609a      	str	r2, [r3, #8]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e041      	b.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d009      	beq.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b14:	d004      	beq.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a10      	ldr	r2, [pc, #64]	@ (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d10c      	bne.n	8002b3a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400

08002b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <memset>:
 8002b84:	4603      	mov	r3, r0
 8002b86:	4402      	add	r2, r0
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d100      	bne.n	8002b8e <memset+0xa>
 8002b8c:	4770      	bx	lr
 8002b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b92:	e7f9      	b.n	8002b88 <memset+0x4>

08002b94 <__libc_init_array>:
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	2600      	movs	r6, #0
 8002b98:	4d0c      	ldr	r5, [pc, #48]	@ (8002bcc <__libc_init_array+0x38>)
 8002b9a:	4c0d      	ldr	r4, [pc, #52]	@ (8002bd0 <__libc_init_array+0x3c>)
 8002b9c:	1b64      	subs	r4, r4, r5
 8002b9e:	10a4      	asrs	r4, r4, #2
 8002ba0:	42a6      	cmp	r6, r4
 8002ba2:	d109      	bne.n	8002bb8 <__libc_init_array+0x24>
 8002ba4:	f000 f81a 	bl	8002bdc <_init>
 8002ba8:	2600      	movs	r6, #0
 8002baa:	4d0a      	ldr	r5, [pc, #40]	@ (8002bd4 <__libc_init_array+0x40>)
 8002bac:	4c0a      	ldr	r4, [pc, #40]	@ (8002bd8 <__libc_init_array+0x44>)
 8002bae:	1b64      	subs	r4, r4, r5
 8002bb0:	10a4      	asrs	r4, r4, #2
 8002bb2:	42a6      	cmp	r6, r4
 8002bb4:	d105      	bne.n	8002bc2 <__libc_init_array+0x2e>
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
 8002bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbc:	4798      	blx	r3
 8002bbe:	3601      	adds	r6, #1
 8002bc0:	e7ee      	b.n	8002ba0 <__libc_init_array+0xc>
 8002bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc6:	4798      	blx	r3
 8002bc8:	3601      	adds	r6, #1
 8002bca:	e7f2      	b.n	8002bb2 <__libc_init_array+0x1e>
 8002bcc:	08002c18 	.word	0x08002c18
 8002bd0:	08002c18 	.word	0x08002c18
 8002bd4:	08002c18 	.word	0x08002c18
 8002bd8:	08002c1c 	.word	0x08002c1c

08002bdc <_init>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	bf00      	nop
 8002be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be2:	bc08      	pop	{r3}
 8002be4:	469e      	mov	lr, r3
 8002be6:	4770      	bx	lr

08002be8 <_fini>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	bf00      	nop
 8002bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bee:	bc08      	pop	{r3}
 8002bf0:	469e      	mov	lr, r3
 8002bf2:	4770      	bx	lr
